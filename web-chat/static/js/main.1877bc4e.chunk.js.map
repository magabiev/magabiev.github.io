{"version":3,"sources":["redux/actions/contacts.js","components/sidebar/Search.js","components/profile/Avatar.js","utils/dom.js","redux/actions/chat.js","components/chat/message/CheckRead.js","components/dropdown/Dropdown.js","components/dropdown/DropdownItem.js","components/sidebar/Contact.js","redux/actions/profile.js","components/sidebar/SkeletonContact.js","components/sidebar/Sidebar.js","components/chat/SendButtons.js","components/chat/FileButton.js","components/chat/SendForm.js","components/chat/header/SearchMessage.js","components/chat/header/Updating.js","components/chat/header/Name.js","components/chat/header/Header.js","components/chat/message/MessageDropdown.js","redux/actions/application.js","components/chat/message/TextMessage.js","components/chat/message/InfoMessage.js","components/chat/message/Message.js","components/chat/Chat.js","components/profile/Social.js","components/profile/Media.js","components/profile/Communications.js","components/profile/Profile.js","components/chat/Preloader.js","components/App.js","redux/reducers/chat.js","redux/reducers/profile.js","redux/reducers/contacts.js","redux/reducers/application.js","redux/index.js","index.js"],"names":["searchContacts","inputValue","type","payload","Search","dispatch","useDispatch","searchValue","useSelector","state","application","contactSearchValue","className","placeholder","value","onChange","e","target","length","onClick","Avatar","size","name","online","switchClass","classNames","small","medium","large","defaultProps","scrollChatDown","chatWindow","document","getElementById","scrollTop","scrollHeight","searchMessages","inputMessage","content","CheckRead","read","Dropdown","children","typeClasses","dropdown_contact","dropdown_message","DropdownItem","action","Contact","contact","myId","profile","classes","active_contact","_id","contactId","fetch","then","response","json","loadMessages","fullname","lastMessage","toUserId","moment","time","format","SkeletonRow","height","width","count","SkeletonContact","Array","fill","map","item","index","key","Sidebar","useEffect","items","contacts","filter","toUpperCase","indexOf","loading","SendButtons","animation","send","clear","iconButton","CSSTransition","in","timeout","FileButton","SendForm","chat","maxRows","getState","requestId","method","headers","Accept","body","JSON","stringify","sentMessage","SearchMessage","searchOpen","Updating","Name","Header","toggleOpen","useHotkeys","MessageDropdown","messageId","dropdownOpen","messageTempId","openClasses","dropdown_icon","TextMessage","message","outgoing","classesMessage","message_block","my_message_block","sending","prototype","PropTypes","object","InfoMessage","Message","Chat","id","Social","socials","instagram","twitter","facebook","Media","fileName","Communications","Profile","open","username","Preloader","props","App","path","initialState","deleting","dropdownMessageOpen","logger","createLogger","collapsed","diff","reducers","combineReducers","tempMessage","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1877bc4e.chunk.js","sourcesContent":["/**\n * Получене списка контактов\n * @returns {function(*): void}\n */\nexport function loadContacts() {\n  return (dispatch) => {\n    dispatch({ type: \"load/sidebar/started\" });\n    fetch(\"http://151.248.117.7:8001/api/contacts\")\n      .then((response) => response.json())\n      .then((json) =>\n        dispatch({\n          type: \"load/sidebar/succeed\",\n          payload: json,\n        })\n      );\n  };\n}\n\n/**\n * Поиск контактов\n */\nexport function searchContacts(inputValue) {\n  return { type: \"searchRequest/contacts/start\", payload: inputValue };\n}\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { searchContacts } from \"../../redux/actions/contacts\";\n\nfunction Search() {\n  /**\n   * Хук редакса\n   */\n  const dispatch = useDispatch();\n  /**\n   * Значение поля ввода\n   */\n  const searchValue = useSelector(\n    (state) => state.application.contactSearchValue\n  );\n  /**\n   * Передача данных из поля ввода\n   * @param e\n   */\n  const handleChange = (e) => {\n    dispatch(searchContacts(e.target.value));\n  };\n  /**\n   * Очистка поля ввода\n   */\n  const clearSearch = () => {\n    dispatch(searchContacts(\"\"));\n  };\n\n  return (\n    <div className=\"search_contact\">\n      <i className=\"material-icons\">search</i>\n      <input\n        placeholder=\"Search Contact\"\n        value={searchValue}\n        onChange={handleChange}\n      />\n      {searchValue.length !== 0 && (\n        <i onClick={clearSearch} className=\"material-icons click\">\n          clear\n        </i>\n      )}\n    </div>\n  );\n}\n\nexport default Search;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\n\nfunction Avatar({ size, name, online }) {\n  /**\n   * Смена классов с определенным размером\n   * @returns {string}\n   */\n  const switchClass = classNames(\n    \"avatar\",\n    { small: size === \"small\" },\n    { medium: size === \"medium\" },\n    { large: size === \"large\" }\n  );\n\n  return (\n    <div className={switchClass}>\n      {online && <div className=\"online\" />}\n      <div className=\"m-auto\">{name[0]}</div>\n    </div>\n  );\n}\n\n/**\n * Объявление пропса на соответствие определённому JS-типу.\n * @type {{size: Requireable<string>, name: Requireable<string>, online: Requireable<boolean>}}\n */\nAvatar.propTypes = {\n  size: PropTypes.string,\n  online: PropTypes.bool,\n  name: PropTypes.string,\n};\n\n/**\n * Задание значений по умолчанию для пропсов\n */\nAvatar.defaultProps = {\n  name: \"Name\",\n  size: \"medium\",\n};\n\nexport default Avatar;\n","/**\n * Получение узла окна чата и прокрутка чата до конца\n */\nexport const scrollChatDown = () => {\n  const chatWindow = document.getElementById(\"chat-window\");\n  chatWindow.scrollTop = chatWindow.scrollHeight;\n};\n","/**\n * Загрузка сообщений\n * @param myId\n * @param contactId\n * @returns {function(*): void}\n */\nimport { scrollChatDown } from \"../../utils/dom\";\n\nexport function loadMessages(myId, contactId) {\n  return (dispatch) => {\n    dispatch({ type: \"load/chat/started\" });\n    fetch(`http://151.248.117.7:8001/api/messages/${myId}/${contactId}`)\n      .then((response) => response.json())\n      .then((json) => {\n        dispatch({\n          type: \"load/chat/succeed\",\n          payload: json,\n        });\n        scrollChatDown();\n      });\n  };\n}\nexport function sentMessageBegin(messageObject) {\n  return { type: \"send/message/started\", payload: messageObject };\n}\n/**\n * Добавление сообщения\n */\nexport function sentMessage(myId, contactId, content) {\n  return (dispatch, getState) => {\n    const requestId = getState().chat.requestId;\n\n    dispatch(\n      sentMessageBegin({\n        myId,\n        requestId,\n        content,\n        toUserId: contactId,\n        type: \"text\",\n      })\n    );\n    fetch(\"http://151.248.117.7:8001/api/messages\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        myId,\n        contactId,\n        type: \"text\",\n        content,\n      }),\n    })\n      .then((response) => response.json())\n      .then((json) => {\n        dispatch({\n          type: \"send/message/succeed\",\n          payload: {\n            requestId,\n            ...json,\n          },\n        });\n        scrollChatDown();\n      });\n  };\n}\n\n/**\n * Удаление сообщения\n */\nexport function deletedMessage(messageId) {\n  return (dispatch) => {\n    dispatch({\n      type: \"delete/message/started\",\n    });\n    fetch(\"http://151.248.117.7:8001/api/messages\", {\n      method: \"DELETE\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(messageId),\n    })\n      .then((response) => response.json())\n      .then((json) =>\n        dispatch({\n          type: \"delete/message/succeed\",\n          payload: json,\n        })\n      );\n  };\n}\n\n/**\n * Открытие и закрытие поисковика сообщений\n * @returns {{type: string}}\n */\nexport function searchOpened() {\n  return { type: \"open/search/toggle\" };\n}\n\n/**\n * Поиск сообщений\n */\nexport function searchMessages(inputValue) {\n  return { type: \"searchRequest/messages/start\", payload: inputValue };\n}\n\n/**\n * Ввод сообщения\n * @param content\n * @returns {{payload: *, type: string}}\n */\nexport function inputMessage(content) {\n  return { type: \"input/content/start\", payload: content };\n}\n","import React from \"react\";\n\nfunction CheckRead({ read }) {\n  return (\n    <span className=\"read\">\n      {read ? (\n        <i className=\"material-icons\">done_all</i>\n      ) : (\n        <i className=\"material-icons\">done</i>\n      )}\n    </span>\n  );\n}\n\nexport default CheckRead;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\n\nfunction Dropdown({ children, type }) {\n  /**\n   * Смена классов относительно типа меню\n   * @type {string}\n   */\n  const typeClasses = classNames(\n    \"dropdown_menu\",\n    {\n      dropdown_contact: type === \"contact\",\n    },\n    { dropdown_message: type === \"message\" }\n  );\n\n  return <div className={typeClasses}>{children}</div>;\n}\n\n/**\n * Объявление пропса на соответствие определённому JS-типу.\n * @type {{type: Requireable<string>}}\n */\nDropdown.propTypes = {\n  type: PropTypes.string,\n};\n\nexport default Dropdown;\n","import React from \"react\";\n\nfunction DropdownItem({ action, children }) {\n  return (\n    <div onClick={action} className=\"dropdown_item click\">\n      {children}\n    </div>\n  );\n}\n\nexport default DropdownItem;\n","import React from \"react\";\nimport Avatar from \"../profile/Avatar\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { loadMessages } from \"../../redux/actions/chat\";\nimport { profileReceived } from \"../../redux/actions/profile\";\nimport CheckRead from \"../chat/message/CheckRead\";\nimport moment from \"moment\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport Dropdown from \"../dropdown/Dropdown\";\nimport DropdownItem from \"../dropdown/DropdownItem\";\nimport { openDropdownToggle } from \"../../redux/actions/application\";\n\nfunction Contact({ contact }) {\n  /**\n   * Хук редакса\n   */\n  const dispatch = useDispatch();\n\n  /**\n   * Данные о myId\n   */\n  const myId = useSelector((state) => state.application.myId);\n\n  /**\n   * Передача нужного id  и получение его сообщений и получение профиля контакта\n   */\n  const handleClickContact = () => {\n    if (contact._id !== profile._id) {\n      dispatch(loadMessages(myId, contact._id));\n    }\n    dispatch(profileReceived(contact));\n  };\n  /**\n   *\n   */\n  const handleClickOption = () => {\n    dispatch(openDropdownToggle());\n  };\n  /**\n   * Получение текущего профиля контакта\n   */\n  const profile = useSelector((state) => state.profile.profile);\n\n  /**\n   * Проверка активного чата и применение соответствующего класса\n   * @returns {string}\n   *\n   */\n  const classes = classNames(\"contact\", {\n    active_contact: profile._id === contact._id,\n  });\n\n  return (\n    <div className={classes} onClick={handleClickContact}>\n      <Avatar size=\"medium\" name={contact.fullname} online={contact.online} />\n      <div className=\"info\">\n        <div className=\"name\">{contact.fullname}</div>\n        <div className=\"last_message\">\n          {contact._id === contact.lastMessage?.toUserId && (\n            <CheckRead read={contact.lastMessage.read} />\n          )}\n          {contact.lastMessage?.content}\n        </div>\n      </div>\n      <div className=\"options\">\n        <span className=\"date_contact\">\n          {moment(contact.lastMessage?.time).format(\"hh:mm\")}\n        </span>\n        <span className=\"option\">\n          <i className=\"material-icons\">more_horiz</i>\n        </span>\n        {/*{contact._id === profile._id && (*/}\n        {/*  <Dropdown type=\"contact\">*/}\n        {/*    <DropdownItem>Delete</DropdownItem>*/}\n        {/*  </Dropdown>*/}\n        {/*)}*/}\n      </div>\n    </div>\n  );\n}\n\n/**\n * Объявление пропса на соответствие определённому JS-типу.\n */\n\nContact.propTypes = { contact: PropTypes.object };\n\nexport default Contact;\n","/**\n * Получение профиля контакта\n * @param item\n * @returns {{payload: *, type: string}}\n */\nexport function profileReceived(item) {\n  return { type: \"get/item/succeed\", payload: item };\n}\n\n/**\n * Открытие и закрытие окна профиля\n * @returns {{type: string}}\n */\nexport function profileOpened() {\n  return { type: \"open/profile/toggle\" };\n}\n","import React from \"react\";\nimport Skeleton from \"react-loading-skeleton\";\n\nfunction SkeletonRow() {\n  return (\n    <div className=\"contact_skeleton\">\n      <div className=\"avatar_skeleton\">\n        <Skeleton height={100} width={100} />\n      </div>\n      <div className=\"info_skeleton\">\n        <Skeleton count={2} />\n      </div>\n    </div>\n  );\n}\n\nfunction SkeletonContact() {\n  const emptyArray = new Array(9).fill(1);\n\n  return emptyArray.map((item, index) => {\n    return <SkeletonRow key={index} />;\n  });\n}\n\nexport default SkeletonContact;\n","import React, { useEffect } from \"react\";\nimport Search from \"./Search\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { loadContacts } from \"../../redux/actions/contacts\";\nimport Contact from \"./Contact\";\nimport SkeletonContact from \"./SkeletonContact\";\n\nfunction Sidebar() {\n  /**\n   * Хук редакса\n   */\n  const dispatch = useDispatch();\n  /**\n   * Загрузка контактов вместе с загрузкой компонента\n   */\n  useEffect(() => {\n    dispatch(loadContacts());\n  }, [dispatch]);\n  /**\n   * Получение данных о контактах и Фильтрация массива по запросу поиска\n   */\n  const items = useSelector((state) => {\n    return state.contacts.items.filter((item) => {\n      const { contactSearchValue } = state.application;\n      return (\n        item.fullname\n          .toUpperCase()\n          .indexOf(contactSearchValue.toUpperCase()) !== -1\n      );\n    });\n  });\n  /**\n   * Состояние звагрузки данных\n   */\n  const loading = useSelector((state) => state.contacts.loading);\n\n  return (\n    <div className=\"sidebar\">\n      <div className=\"contacts_block\">\n        <div className=\"search_parent\">\n          <Search />\n        </div>\n        {loading ? (\n          <SkeletonContact />\n        ) : (\n          items.map((item) => {\n            return <Contact key={item._id} contact={item} />;\n          })\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Sidebar;\n","import React from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\n\nfunction SendButtons({ animation, send, clear, iconButton }) {\n  return (\n    <button className=\"send click\">\n      {iconButton ? (\n        <CSSTransition\n          in={animation.length !== 0}\n          timeout={500}\n          classNames=\"sendIcon\"\n        >\n          <i\n            className=\"material-icons\"\n            onClick={() => {\n              clear();\n              send();\n            }}\n          >\n            send\n          </i>\n        </CSSTransition>\n      ) : (\n        <CSSTransition\n          in={animation.length !== 0}\n          timeout={500}\n          classNames=\"mic\"\n        >\n          <i className=\"material-icons\">mic</i>\n        </CSSTransition>\n      )}\n    </button>\n  );\n}\n\nexport default SendButtons;\n","import React from \"react\";\n\nfunction FileButton() {\n  return (\n    <button className=\"send click\">\n      <i className=\"material-icons\">attach_file</i>\n    </button>\n  );\n}\n\nexport default FileButton;\n","import React from \"react\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { inputMessage, sentMessage } from \"../../redux/actions/chat\";\nimport SendButtons from \"./SendButtons\";\nimport FileButton from \"./FileButton\";\n\nfunction SendForm() {\n  /**\n   * Хук редакса\n   */\n  const dispatch = useDispatch();\n  /**\n   * Данные о myId\n   */\n  const myId = useSelector((state) => state.application.myId);\n  /**\n   * Данные о профиле текущего чата\n   */\n  const profile = useSelector((state) => state.profile.profile);\n  /**\n   * Отправка сообщения\n   */\n  const sendMessage = () => {\n    dispatch(sentMessage(myId, profile._id, content));\n  };\n  /**\n   * Значение поля ввода\n   */\n  const content = useSelector((state) => state.chat.content);\n  /**\n   * Передача значения поля ввода в редакс\n   */\n  const handleChange = (e) => {\n    dispatch(inputMessage(e.target.value));\n  };\n  /**\n   * Очистка поля ввода\n   */\n  const clear = () => {\n    dispatch(inputMessage(\"\"));\n  };\n\n  return (\n    <div className=\"form_block\">\n      <TextareaAutosize\n        onChange={handleChange}\n        value={content}\n        className=\"send_form\"\n        placeholder=\"Write a message...\"\n        maxRows=\"5\"\n      />\n      <FileButton />\n      <SendButtons\n        animation={content}\n        clear={clear}\n        send={sendMessage}\n        iconButton={content.length !== 0}\n      />\n    </div>\n  );\n}\n\nexport default SendForm;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { searchMessages, searchOpened } from \"../../../redux/actions/chat\";\n\nfunction SearchMessage() {\n  /**\n   * Хук редакса\n   */\n  const dispatch = useDispatch();\n  /**\n   * Открытие и закрытие поисковика сообщений\n   */\n  const searchOpenToggle = () => {\n    dispatch(searchOpened());\n  };\n  /**\n   * Значение поля ввода\n   */\n  const searchValue = useSelector((state) => state.application.searchValue);\n  /**\n   * Передача данных из поля ввода\n   * @param e\n   */\n  const handleChange = (e) => {\n    dispatch(searchMessages(e.target.value));\n  };\n  /**\n   * Очистка поля ввода\n   */\n  const clearSearch = () => {\n    dispatch(searchMessages(\"\"));\n  };\n  /**\n   * Состояние открытия поисковика\n   */\n  const searchOpen = useSelector((state) => state.application.searchOpen);\n\n  return (\n    <div className={searchOpen ? \"search_message\" : \"search_message_close\"}>\n      <div className=\"icon click\" onClick={searchOpenToggle}>\n        <i className=\"material-icons\">search</i>\n      </div>\n      <input value={searchValue} onChange={handleChange} />\n      {searchValue.length !== 0 && (\n        <i onClick={clearSearch} className=\"material-icons click\">\n          clear\n        </i>\n      )}\n    </div>\n  );\n}\n\nexport default SearchMessage;\n","import React from \"react\";\n\nfunction Updating() {\n  return (\n    <span className=\"updating\">\n      Updating\n      <i className=\"material-icons loading_chat\">autorenew</i>\n      ...\n    </span>\n  );\n}\n\nexport default Updating;\n","import React from \"react\";\n\nfunction Name({ name, online }) {\n  return (\n    <div className=\"header_name\">\n      {name}\n      {online && <div className=\"online\"></div>}\n    </div>\n  );\n}\n\nexport default Name;\n","import React from \"react\";\nimport SearchMessage from \"./SearchMessage\";\nimport { profileOpened } from \"../../../redux/actions/profile\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHotkeys } from \"react-hotkeys-hook\";\nimport Updating from \"./Updating\";\nimport Name from \"./Name\";\n\nfunction Header({ loading }) {\n  /**\n   * Хук редакса\n   */\n  const dispatch = useDispatch();\n  /**\n   * Функция открытия и закрытия окна профиля\n   */\n  const toggleOpen = () => {\n    dispatch(profileOpened());\n  };\n  /**\n   * Вызов функции открытия окна профиля при нажатии горячих клавиш\n   */\n  useHotkeys(\"shift+p\", () => toggleOpen());\n  /**\n   * Получение текущего профиля контакта\n   */\n  const profile = useSelector((state) => state.profile.profile);\n\n  return (\n    <div className=\"header_parent\">\n      <div className=\"header_search\">\n        <SearchMessage />\n      </div>\n      {loading ? (\n        <Updating />\n      ) : (\n        <Name name={profile.fullname} online={profile.online} />\n      )}\n      <div className=\"profile_open\">\n        <i className=\"material-icons click\" onClick={toggleOpen}>\n          person\n        </i>\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Dropdown from \"../../dropdown/Dropdown\";\nimport DropdownItem from \"../../dropdown/DropdownItem\";\nimport { openDropdownToggle } from \"../../../redux/actions/application\";\nimport classNames from \"classnames\";\n\nfunction MessageDropdown({ messageId }) {\n  /**\n   * Хук редакса\n   */\n  const dispatch = useDispatch();\n  /**\n   * Состояние открытия или закрытия меню\n   */\n  const dropdownOpen = useSelector((state) => state.application.dropdownOpen);\n  /**\n   * Открытие и закрытие выпадающего меню\n   */\n  const handleClickDropIcon = () => {\n    dispatch(openDropdownToggle());\n  };\n\n  /**\n   * id текущего сообщения\n   */\n  const messageTempId = useSelector((state) => state.application.messageTempId);\n  /**\n   * Смена классов иконки при открытии  меню и закрытии\n   * @type {string}\n   */\n  const openClasses = classNames(\"dropdown_icon_close\", {\n    dropdown_icon: dropdownOpen && messageTempId === messageId,\n  });\n\n  return (\n    <>\n      <div className={openClasses} onClick={handleClickDropIcon}>\n        <i className=\"material-icons\">keyboard_arrow_down</i>\n      </div>\n      {dropdownOpen && messageTempId === messageId && (\n        <Dropdown type=\"message\">\n          <DropdownItem>Delete</DropdownItem>\n        </Dropdown>\n      )}\n    </>\n  );\n}\n\nexport default MessageDropdown;\n","/**\n * Загрузка данных о профиле\n * @returns {Promise<{payload: *, type: string}>}\n */\nexport function loadMyId() {\n  return (dispatch) => {\n    dispatch({ type: \"load/myId/started\" });\n    fetch(\"http://151.248.117.7:8001/api/profile\")\n      .then((response) => response.json())\n      .then((json) =>\n        dispatch({\n          type: \"load/myId/succeed\",\n          payload: json._id,\n        })\n      );\n  };\n}\n\n/**\n * Открытие и закрытие выпадающего меню\n * @returns {{type: string}}\n */\nexport function openDropdownToggle() {\n  return { type: \"open/dropdown/toggle\" };\n}\n/**\n * закрытие выпадающего меню контактов\n * @returns {{type: string}}\n */\nexport function closeDropdown() {\n  return { type: \"close/dropdown/started\" };\n}\n/**\n * Полчение id сообщения\n * @param id\n * @returns {{payload: *, type: string}}\n */\nexport function receivedMessageId(id) {\n  return { type: \"get/messageId/started\", payload: id };\n}\n","import React from \"react\";\nimport Avatar from \"../../profile/Avatar\";\nimport moment from \"moment\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport CheckRead from \"./CheckRead\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport MessageDropdown from \"./MessageDropdown\";\nimport { receivedMessageId } from \"../../../redux/actions/application\";\n\nfunction TextMessage({ message }) {\n  /**\n   *  Хук редакса\n   */\n  const dispatch = useDispatch();\n  /**\n   * Для временного хранения id сооющения на который наведен курсор\n   */\n  const handleClick = () => {\n    dispatch(receivedMessageId(message._id));\n  };\n  /**\n   * Данные о моем id\n   */\n  const myId = useSelector((state) => state.application.myId);\n  /**\n   * Получение текущего профиля контакта\n   */\n  const profile = useSelector((state) => state.profile.profile);\n  /**\n   * Проверка исходящее ли сообщение сообщение\n   * @type {boolean}\n   */\n  const outgoing = myId === message.toUserId;\n  /**\n   * Смена классов сообщения исходя из стороны отправки\n   */\n  const classesMessage = classNames(\n    \"margin\",\n    { message_block: outgoing },\n    { my_message_block: !outgoing }\n  );\n\n  return (\n    <div className={classesMessage} onClick={handleClick}>\n      {outgoing && <Avatar size=\"small\" name={profile.fullname} />}\n      <div className=\"message\">\n        {message.content}\n        <div className=\"date\">\n          <div>{moment(message.time).format(\"hh:mm\")}</div>\n          {message.sending ? (\n            <span className=\"timer\">\n              <i className=\"material-icons \">timer</i>\n            </span>\n          ) : (\n            !outgoing && <CheckRead read={message.read} />\n          )}\n        </div>\n        <MessageDropdown messageId={message._id} />\n      </div>\n    </div>\n  );\n}\n\nTextMessage.prototype = { message: PropTypes.object };\n\nexport default TextMessage;\n","import React from \"react\";\n\nfunction InfoMessage({ content }) {\n  return <div className=\"type_info\">{content}</div>;\n}\n\nexport default InfoMessage;\n","import React from \"react\";\nimport TextMessage from \"./TextMessage\";\nimport InfoMessage from \"./InfoMessage\";\n\nfunction Message({ message }) {\n  if (message.type === \"text\") {\n    return <TextMessage message={message} />;\n  }\n  return <InfoMessage content={message.content} />;\n}\n\nexport default Message;\n","import React from \"react\";\nimport SendForm from \"./SendForm\";\nimport Header from \"./header/Header\";\nimport Message from \"./message/Message\";\nimport { useSelector } from \"react-redux\";\n\nfunction Chat() {\n  /**\n   * Массив с сообщениями и его фильтрация  по запросу поиска\n   */\n  const items = useSelector((state) => {\n    return state.chat.items.filter((item) => {\n      return (\n        item.content\n          .toUpperCase()\n          .indexOf(state.application.searchValue.toUpperCase()) !== -1\n      );\n    });\n  });\n  /**\n   * Состояние загрузки сообщений\n   */\n  const loading = useSelector((state) => state.chat.loading);\n\n  return (\n    <div className=\"chat_parent\">\n      <Header loading={loading} />\n      <div className=\"chat_block\" id=\"chat-window\">\n        {!loading &&\n          items.map((message) => {\n            return <Message key={message._id} message={message} />;\n          })}\n      </div>\n      <div className=\"parent_form\">\n        <SendForm />\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n","import React from \"react\";\n\nfunction Social({ socials }) {\n  return (\n    <div className=\"profile_social\">\n      <span className=\"header_profile\">Social</span>\n      <div className=\"social_block\">\n        {socials.instagram && (\n          <div className=\"icons_social click\">\n            <i className=\"fab fa-instagram\" /> {socials.instagram}\n          </div>\n        )}\n        {socials.twitter && (\n          <div className=\"icons_social click\">\n            <i className=\"fab fa-twitter\" /> {socials.twitter}\n          </div>\n        )}\n        {socials.facebook && (\n          <div className=\"icons_social click\">\n            <i className=\"fab fa-facebook-square\" /> {socials.facebook}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Social;\n","import React from \"react\";\n\nfunction Media({ fileName }) {\n  return (\n    <div className=\"profile_media\">\n      <span className=\"header_profile\">Media</span>\n      <div className=\"mediafiles\">\n        <div className=\"file click\">\n          <div className=\"media_img\"></div>\n          <div className=\"media_info\">{fileName}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Media;\n","import React from \"react\";\n\nfunction Communications() {\n  return (\n    <div className=\"communication\">\n      <div className=\"icons click\">\n        <div className=\"m-auto\">\n          <i className=\"material-icons\">call</i>\n        </div>\n      </div>\n      <div className=\"icons click\">\n        <div className=\"m-auto\">\n          <i className=\"material-icons\">videocam</i>\n        </div>\n      </div>\n      <div className=\"icons click\">\n        <div className=\"m-auto\">\n          <i className=\"material-icons\">mail</i>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Communications;\n","import React from \"react\";\nimport Avatar from \"./Avatar\";\nimport Social from \"./Social\";\nimport Media from \"./Media\";\nimport { useSelector } from \"react-redux\";\nimport Communications from \"./Communications\";\n\nfunction Profile() {\n  /**\n   * Состояние открытия окна профиля\n   */\n  const open = useSelector((state) => state.profile.open);\n  /**\n   * Данные о профиле\n   */\n  const profile = useSelector((state) => state.profile.profile);\n  /**\n   * Данные о загрузке профиля\n   */\n  const loading = useSelector((state) => state.chat.loading);\n\n  return (\n    <div className={open ? \"profile_parent_open\" : \"profile_parent\"}>\n      <div className=\"profile_info\">\n        {!loading && (\n          <>\n            <Avatar size={\"large\"} name={profile.fullname} />\n            <div className=\"profile_name\">{profile.fullname}</div>\n            <div className=\"nickname\">@{profile.username}</div>\n          </>\n        )}\n        <Communications />\n      </div>\n      {!loading && profile.socials && <Social socials={profile.socials} />}\n      <Media fileName={\"filename.pdf\"} />\n    </div>\n  );\n}\n\nexport default Profile;\n","import React from \"react\";\n\nfunction Preloader(props) {\n  return (\n    <div className=\"preloader\">\n      <div>Please, select a chat to start messaging</div>\n    </div>\n  );\n}\n\nexport default Preloader;\n","import React, { useEffect } from \"react\";\nimport \"../styles/App.css\";\nimport Sidebar from \"./sidebar/Sidebar\";\nimport Chat from \"./chat/Chat\";\nimport Profile from \"./profile/Profile\";\nimport { loadMyId } from \"../redux/actions/application\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Preloader from \"./chat/Preloader\";\n\nfunction App() {\n  /**\n   * Хук редакса\n   */\n  const dispatch = useDispatch();\n  /**\n   * Состояние открытия чата\n   */\n  const open = useSelector((state) => state.chat.open);\n  /**\n   * Загрузка id вместе с загрузкой компонента\n   */\n  useEffect(() => {\n    dispatch(loadMyId());\n  }, [dispatch]);\n\n  //TODO перенести логику чата в чат\n\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\">\n          <Sidebar />\n          {open ? (\n            <>\n              <Chat /> <Profile />\n            </>\n          ) : (\n            <Preloader />\n          )}\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const initialState = {\n  items: [],\n  loading: true,\n  open: false,\n  content: \"\",\n  requestId: 1,\n  deleting: false,\n};\n\nexport default function chat(state = initialState, action) {\n  switch (action.type) {\n    case \"load/chat/started\":\n      return {\n        ...state,\n        open: true,\n        loading: true,\n      };\n    case \"load/chat/succeed\":\n      return {\n        ...state,\n        items: action.payload,\n        loading: false,\n      };\n    case \"input/content/start\":\n      return {\n        ...state,\n        content: action.payload,\n      };\n    case \"send/message/started\":\n      const tempMessage = {\n        ...action.payload,\n        sending: true,\n      };\n      return {\n        ...state,\n        requestId: state.requestId + 1,\n        items: [...state.items, tempMessage],\n      };\n    case \"send/message/succeed\":\n      return {\n        ...state,\n        items: state.items.map((item) => {\n          if (item.requestId === action.payload.requestId) {\n            return {\n              ...item,\n              sending: false,\n              _id: action.payload._id,\n            };\n          }\n          return item;\n        }),\n      };\n    case \"delete/message/started\":\n      return {\n        ...state,\n        deleting: true,\n      };\n    case \"delete/message/succeed\":\n      return {\n        ...state,\n        items: action.payload,\n        deleting: false,\n      };\n    default:\n      return state;\n  }\n}\n","const initialState = {\n  profile: [],\n  open: false,\n};\n\nexport default function profile(state = initialState, action) {\n  switch (action.type) {\n    case \"get/item/succeed\":\n      return {\n        ...state,\n        profile: action.payload,\n      };\n    case \"open/profile/toggle\":\n      return {\n        ...state,\n        open: !state.open,\n      };\n    default:\n      return state;\n  }\n}\n","const initialState = {\n  items: [],\n  contactSearchValue: \"\",\n  loading: true,\n};\n\nexport default function contacts(state = initialState, action) {\n  switch (action.type) {\n    case \"load/sidebar/started\":\n      return {\n        ...state,\n        loading: true,\n      };\n    case \"load/sidebar/succeed\":\n      return {\n        ...state,\n        items: action.payload,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n}\n","const initialState = {\n  myId: \"\",\n  loading: true,\n  dropdownOpen: false,\n  dropdownMessageOpen: false,\n  messageTempId: \"\",\n  searchOpen: false,\n  searchValue: \"\",\n  contactSearchValue: \"\",\n};\n\nexport default function application(state = initialState, action) {\n  switch (action.type) {\n    case \"load/myId/started\":\n      return {\n        ...state,\n        loading: true,\n      };\n    case \"load/myId/succeed\":\n      return {\n        ...state,\n        myId: action.payload,\n        loading: false,\n      };\n    case \"open/search/toggle\":\n      return {\n        ...state,\n        searchOpen: !state.searchOpen,\n      };\n    case \"searchRequest/messages/start\":\n      return {\n        ...state,\n        searchValue: action.payload,\n      };\n    case \"searchRequest/contacts/start\":\n      return {\n        ...state,\n        contactSearchValue: action.payload,\n      };\n    case \"open/dropdown/toggle\":\n      return {\n        ...state,\n        dropdownOpen: !state.dropdownOpen,\n      };\n    case \"get/messageId/started\":\n      return {\n        ...state,\n        messageTempId: action.payload,\n      };\n    case \"close/dropdown/started\":\n      return {\n        ...state,\n        dropdownOpen: false,\n      };\n    default:\n      return state;\n  }\n}\n","import { createLogger } from \"redux-logger\";\nimport { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport chat from \"./reducers/chat\";\nimport profile from \"./reducers/profile\";\nimport contacts from \"./reducers/contacts\";\nimport thunk from \"redux-thunk\";\nimport application from \"./reducers/application\";\n\n/**\n * Настройка логгера\n */\nconst logger = createLogger({\n  collapsed: true,\n  diff: true,\n});\n\n/**\n * Комбинирование редюсеров\n */\nconst reducers = combineReducers({ chat, profile, contacts, application });\n\n/**\n *  Создание настройка и стора\n */\nexport const store = createStore(reducers, applyMiddleware(thunk, logger));\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"normalize.css\";\nimport { Provider } from \"react-redux\";\nimport \"material-design-icons/iconfont/material-icons.css\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport { store } from \"./redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <div className=\"container\">\n        <App />\n      </div>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}