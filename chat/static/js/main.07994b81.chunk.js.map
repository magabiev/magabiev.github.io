{"version":3,"sources":["components/Header.js","redux/action.js","components/Form.js","components/Chat.js","components/Contacts.js","components/App.js","redux/reducer.js","index.js"],"names":["library","add","faPlus","Header","items","useSelector","state","loading","dispatch","useDispatch","openChat","chats","chatLoading","className","style","backgroundImage","picture","name","online","friends","length","onClick","type","icon","faPaperPlane","Form","useState","message","setMessage","adding","e","target","value","fetch","method","headers","body","JSON","stringify","then","response","json","payload","addingMessage","Chat","chatWindow","useRef","messages","useEffect","current","scrollTop","scrollHeight","ref","map","item","key","message_id","side","text","timestamp","Contacts","id","lastChat","latest_timestamp","App","initialState","logger","createLogger","collapsed","diff","store","createStore","action","chatlog","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07994b81.chunk.js","sourcesContent":["import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {library} from '@fortawesome/fontawesome-svg-core'\r\nimport {faPlus} from '@fortawesome/free-solid-svg-icons'\r\nimport {hiddenChat} from \"../redux/action\";\r\n\r\nlibrary.add(faPlus);\r\n\r\nfunction Header() {\r\n  /** Данные о количестве чатов и аватарки пользователя **/\r\n  const items = useSelector(state => state.items);\r\n\r\n  /** Состояние загрузки данных пользователя **/\r\n  const loading = useSelector(state => state.loading);\r\n\r\n  /** Хук редакса **/\r\n  const dispatch = useDispatch();\r\n\r\n  /** Состояние видимости окна чата **/\r\n  const openChat = useSelector(state => state.openChat);\r\n\r\n  /** Данные собеседника **/\r\n  const chats = useSelector(state => state.chats);\r\n\r\n  /** Состояние загрузки чата **/\r\n  const chatLoading = useSelector(state => state.chatLoading);\r\n\r\n  /** Смена классов иконки кнопки выхода относительно состояния видимости чата **/\r\n  const switchClassIcon = () => {\r\n    if (openChat === true) {\r\n      return 'icon_translate click'\r\n    }\r\n    return 'icon click'\r\n  }\r\n\r\n  /** Функция смены аватара относительно состояния видимости чата **/\r\n  const switchAvatar = () => {\r\n    if (openChat === true) {\r\n      return chats.picture;\r\n    }\r\n    return items.picture\r\n  }\r\n\r\n  /** Функция выхода из чата **/\r\n  const hideChat = () => {\r\n    dispatch(hiddenChat());\r\n  }\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"main\">\r\n        <div className=\"header_info\">\r\n          {/** Смена аватара **/}\r\n          <div className=\"avatar\" style={{backgroundImage: \"url(\" + switchAvatar() + \")\"}}/>\r\n          <div className=\"text_block\">\r\n            <div className=\"text\">\r\n              {/** Вывод данных относительно состояния видимости и загрузки чата **/}\r\n              {\r\n                openChat ? (\r\n                  <>\r\n                    {chatLoading ? 'name' : chats.name}\r\n                    <div className={chats.online ? 'online' : 'offline'}/>\r\n                  </>\r\n                ) : (<>Чаты ({loading ? '00' : items.friends.length}) </>)\r\n              }\r\n            </div>\r\n          </div>\r\n          {/** Смена стилей иконки выхода из чата **/}\r\n          <div className={switchClassIcon()} onClick={hideChat}>\r\n            <FontAwesomeIcon icon=\"plus\"/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","/**\r\n * Загрузка чатов\r\n * @returns {function(...[*]=)}\r\n */\r\nexport function loadContacts() {\r\n  return (dispatch) => {\r\n    dispatch({type: 'loading'});\r\n    fetch('https://intocode.ru/chat.php')\r\n      .then(response => response.json())\r\n      .then(json => dispatch({\r\n        type: 'loading_success',\r\n        payload: json\r\n      }));\r\n  }\r\n}\r\n\r\n/**\r\n * Получение ID и загрузка чата относительно этого ID\r\n * @param id\r\n * @returns {function(...[*]=)}\r\n */\r\nexport function loadMessages(id) {\r\n  return (dispatch) => {\r\n    dispatch({type: 'loading_messages'});\r\n    fetch(`https://intocode.ru/chat.php?action=friends&id=${id}`)\r\n      .then(response => response.json())\r\n      .then(json => dispatch({\r\n        type: 'loading_mess_success',\r\n        payload: json\r\n      }));\r\n  }\r\n}\r\n\r\n/**\r\n * Добавление нового сообщения\r\n * @param message\r\n * @returns {function(...[*]=)}\r\n */\r\nexport function addingMessage(message) {\r\n  return (dispatch) => {\r\n    dispatch({type: 'adding'});\r\n    fetch('https://intocode.ru/chat.php', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({message: message})\r\n    })\r\n      .then(response => response.json())\r\n      .then(json => dispatch({\r\n        type: 'adding_success',\r\n        payload: json\r\n      }));\r\n  }\r\n}\r\n\r\n/**\r\n * Выход из чата\r\n * @returns {{type: string}}\r\n */\r\nexport function hiddenChat() {\r\n  return {type: 'hide_chat'}\r\n}\r\n","import React, {useState} from 'react';\rimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\rimport {library} from \"@fortawesome/fontawesome-svg-core\";\rimport {faPaperPlane} from \"@fortawesome/free-solid-svg-icons/faPaperPlane\";\rimport {addingMessage} from \"../redux/action\";\rimport {useDispatch, useSelector} from \"react-redux\";\r\rlibrary.add(faPaperPlane);\r\rfunction Form() {\r  /** Хук редакса **/\r  const dispatch = useDispatch();\r\r  /** Стейт для значения поля ввода **/\r  const [message, setMessage] = useState('');\r\r  /** Обработчик для поля ввода **/\r  const handleMessage = (e) => {\r    setMessage(e.target.value);\r  }\r\r  /** Функция отправки сообщения **/\r  const sendMessage = () => {\r    dispatch(addingMessage(message));\r    setMessage('');\r  }\r  /** Состояние отправки сообщения **/\r  const adding = useSelector(state => state.adding);\r\r  return (\r    <div className=\"form_main\">\r      <div className=\"message_form\">\r        <input placeholder={adding ? 'loading...' : 'Enter your message...'} onChange={handleMessage} value={message}/>\r      </div>\r      <button\r        /** Применение разных стилей и деактивация относительно содержимого поля ввода **/\r        className={message.length === 0 ? 'btn_send_dis' : 'btn_send click'}\r        disabled={message.length === 0}\r        onClick={sendMessage}\r      >\r        <FontAwesomeIcon icon=\"paper-plane\"/>\r      </button>\r    </div>\r  );\r}\r\rexport default Form;\r","import React, {useEffect, useRef} from 'react';\r\nimport {useSelector} from \"react-redux\";\r\nimport Form from \"./Form\";\r\n\r\nfunction Chat() {\r\n  /** Получение узла окна чата с помошью хука **/\r\n  const chatWindow = useRef(null);\r\n\r\n  /** Состояние загрузки чата **/\r\n  const chatLoading = useSelector(state => state.chatLoading);\r\n\r\n  /** Массив с сообщениями **/\r\n  const messages = useSelector(state => state.messages);\r\n\r\n  /** Состояние загрузки отправленного сообщения **/\r\n  const adding = useSelector(state => state.adding);\r\n\r\n  /** Скролл до конца окна чатов **/\r\n  const scroll = () => {\r\n    chatWindow.current.scrollTop = chatWindow.current.scrollHeight;\r\n  }\r\n\r\n  /** Смена классов относительно стороны сообщения **/\r\n  const switchClass = (side) => {\r\n    if (side === 'left') {\r\n      return 'message_block'\r\n    } else if (side === 'right') {\r\n      return 'my_message_block'\r\n    }\r\n  }\r\n\r\n  /** Вызов функции скролла при загрузке компонента **/\r\n  useEffect(() => {\r\n    adding === false && scroll();\r\n  })\r\n\r\n  return (\r\n    <div className=\"chat_main\" ref={chatWindow}>\r\n      {\r\n        chatLoading ? <div className=\"loader\"/> : messages.length === 0 ? (\r\n          <div className=\"message_block\">\r\n            Нет сообщений\r\n          </div>\r\n        ) : (\r\n          messages.map(item => {\r\n            return (\r\n              <div key={item.message_id} className={switchClass(item.side)}>\r\n                {item.text}\r\n                <span className=\"date_mess\">{item.timestamp}</span>\r\n              </div>\r\n            )\r\n          })\r\n        )\r\n      }\r\n      <Form/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loadContacts, loadMessages} from \"../redux/action\";\r\n\r\nfunction Contacts() {\r\n  /** Массив с данными контактами **/\r\n  const items = useSelector(state => state.items);\r\n\r\n  /** Состояние загрузки данных контактов **/\r\n  const loading = useSelector(state => state.loading);\r\n\r\n  /** Хук редакса **/\r\n  const dispatch = useDispatch();\r\n\r\n  /** Загрузка данных при загрузке компонента **/\r\n  useEffect(() => {\r\n    dispatch(loadContacts())\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"contacts_block\">\r\n      {/** Вывод данных относительно состояния загрузки **/}\r\n      {\r\n        loading ? <div className=\"loader\"/> : (\r\n          items.friends.map(item => {\r\n            return (\r\n              <div key={item.id} className=\"contact click\" onClick={() => dispatch(loadMessages(item.id))}>\r\n                <div>\r\n                  <div className=\"avatar m-right\" style={{backgroundImage: \"url(\" + item.picture + \")\"}}/>\r\n                </div>\r\n                <div className=\"info_mess\">\r\n                  <div className=\"name\">{item.name}</div>\r\n                  <div className=\"message\">{item.lastChat}</div>\r\n                </div>\r\n                <div className=\"date\">\r\n                  {item.latest_timestamp}\r\n                </div>\r\n              </div>\r\n            )\r\n          })\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Contacts;\r\n","import React from 'react';\nimport '../App.css';\nimport Header from \"./Header\";\nimport Chat from \"./Chat\";\nimport {useSelector} from \"react-redux\";\nimport Contacts from \"./Contacts\";\n\nfunction App() {\n  /** Состояние видимости окна чата **/\n  const openChat = useSelector(state => state.openChat);\n\n  return (\n    <div className=\"App\">\n      <div className=\"main_block\">\n        <Header/>\n        {/** Вывот компонентов чата и контактов относительно состояния openChat **/}\n        {openChat ? <Chat/> : <Contacts/>}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/**\r\n * Стейт с данными чатов и сообщенй и с состоянием их загрузки\r\n * @type {{openChat: boolean, chatLoading: boolean, adding: boolean, chats: [], messages: [], loading: boolean, items: []}}\r\n */\r\nconst initialState = {\r\n  loading: true,\r\n  items: [],\r\n  chats: [],\r\n  messages: [],\r\n  openChat: false,\r\n  chatLoading: true,\r\n  adding: false,\r\n}\r\n\r\n/**\r\n * Основной редюсер с кейсами данных и их загрузки\r\n * @param state\r\n * @param action\r\n * @returns {{openChat: boolean, chatLoading: boolean, adding: boolean, chats: *[], messages: *[], loading: boolean, items: *}|{openChat: boolean, chatLoading: boolean, adding: boolean, chats: *[], messages: *[], loading: boolean, items: *[]}|{openChat: boolean, chatLoading: boolean, adding: boolean, chats: *, messages: *, loading: boolean, items: *[]}}\r\n */\r\nexport default function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case 'loading':\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      }\r\n    case 'loading_success':\r\n      return {\r\n        ...state,\r\n        items: action.payload,\r\n        loading: false\r\n      }\r\n    case 'loading_messages':\r\n      return {\r\n        ...state,\r\n        chatLoading: true,\r\n        openChat: true\r\n      }\r\n    case 'loading_mess_success':\r\n      return {\r\n        ...state,\r\n        chats: action.payload,\r\n        messages: action.payload.chatlog,\r\n        chatLoading: false,\r\n      }\r\n    case 'hide_chat':\r\n      return {\r\n        ...state,\r\n        openChat: false\r\n      }\r\n    case 'adding':\r\n      return {\r\n        ...state,\r\n        adding: true,\r\n      }\r\n    case 'adding_success':\r\n      return {\r\n        ...state,\r\n        messages: [...state.messages, action.payload],\r\n        adding: false,\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport 'fontsource-roboto';\nimport {Provider} from \"react-redux\";\nimport {applyMiddleware, createStore} from \"redux\";\nimport reducer from \"./redux/reducer\";\nimport thunk from \"redux-thunk\";\nimport {createLogger} from \"redux-logger/src\";\n\n/**\n * Настройка логгера\n * @type {function(...[*]=)}\n */\nconst logger = createLogger({\n  collapsed: true,\n  diff: true\n});\n\n/**\n * Создание настройка стора\n * @type {*}\n */\nconst store = createStore(reducer, applyMiddleware(thunk, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}