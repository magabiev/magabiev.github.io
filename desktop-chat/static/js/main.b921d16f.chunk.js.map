{"version":3,"sources":["redux/actions/application.js","components/sidebar/Search.js","components/profile/Avatar.js","utils/dom.js","redux/actions/chat.js","components/chat/message/CheckRead.js","components/dropdown/Dropdown.js","components/dropdown/DropdownItem.js","components/sidebar/DropdownContact.js","components/sidebar/Contact.js","components/sidebar/SkeletonContact.js","components/sidebar/Sidebar.js","redux/actions/contacts.js","components/chat/SendButtons.js","components/chat/FileButton.js","components/chat/SendForm.js","components/chat/header/SearchMessage.js","components/chat/header/Updating.js","components/chat/header/Name.js","components/chat/header/Header.js","components/chat/message/MessageDropdown.js","components/chat/message/OutboxMessage.js","components/chat/message/InboxMessage.js","components/chat/message/TextMessage.js","components/chat/message/InfoMessage.js","components/chat/message/Message.js","components/chat/Preloader.js","components/chat/Chat.js","components/profile/Social.js","components/profile/Media.js","components/profile/Communications.js","components/profile/ProfileContact.js","components/App.js","redux/actions/profile.js","redux/reducers/chat.js","redux/reducers/profile.js","redux/reducers/contacts.js","redux/reducers/application.js","redux/index.js","index.js"],"names":["searchMessages","inputValue","type","payload","searchContacts","Search","dispatch","useDispatch","searchValue","useSelector","state","application","contactSearchValue","className","placeholder","value","onChange","e","target","length","onClick","Avatar","size","name","online","switchClass","classNames","small","medium","large","defaultProps","scrollChatDown","chatWindow","document","getElementById","scrollTop","scrollHeight","loadMessages","myId","contactId","fetch","then","response","json","sentMessage","content","getState","messageObject","requestId","chat","toUserId","a","method","headers","Accept","body","JSON","stringify","CheckRead","read","Dropdown","children","isShow","typeClasses","DropdownItem","action","DropdownContact","useState","show","setShow","OutsideClickHandler","onOutsideClick","stopPropagation","Contact","contact","_id","fullname","lastMessage","history","useHistory","opened","useParams","id","profile","classes","push","dayjs","time","format","SkeletonRow","height","width","count","SkeletonContact","Array","fill","map","item","index","key","Sidebar","useEffect","items","contacts","filter","toUpperCase","indexOf","loading","SendButtons","hasMessage","onSend","SwitchTransition","CSSTransition","timeout","FileButton","SendForm","setContent","sendMessage","useCallback","clear","useHotkeys","event","preventDefault","maxRows","SearchMessage","searchOpen","Updating","Name","Header","find","MessageDropdown","messageId","openClasses","deletedMessage","OutboxMessage","message","split","part","sending","InboxMessage","TextMessage","propType","PropTypes","object","InfoMessage","Message","Preloader","Chat","Social","socials","Object","keys","social","Media","fileName","Communications","ProfileContact","openProfile","openContactProfile","username","App","loadingMyId","path","initialState","deleting","logger","createLogger","collapsed","diff","reducers","combineReducers","open","tempMessage","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode"],"mappings":"uNAmBO,SAASA,EAAeC,GAC7B,MAAO,CAAEC,KAAM,+BAAgCC,QAASF,GAKnD,SAASG,EAAeH,GAC7B,MAAO,CAAEC,KAAM,+BAAgCC,QAASF,GCoB3CI,MA1Cf,WAIE,IAAMC,EAAWC,cAIXC,EAAcC,aAClB,SAACC,GAAD,OAAWA,EAAMC,YAAYC,sBAgB/B,OACE,yBAAKC,UAAU,kBACb,uBAAGA,UAAU,kBAAb,UACA,2BACEC,YAAY,iBACZC,MAAOP,EACPQ,SAhBe,SAACC,GACpBX,EAASF,EAAea,EAAEC,OAAOH,WAiBP,IAAvBP,EAAYW,QACX,uBAAGC,QAbW,WAClBd,EAASF,EAAe,MAYKS,UAAU,wBAAnC,W,qBClCR,SAASQ,EAAT,GAAyC,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,OAKtBC,EAAcC,IAClB,SACA,CAAEC,MAAgB,UAATL,GACT,CAAEM,OAAiB,WAATN,GACV,CAAEO,MAAgB,UAATP,IAGX,OACE,yBAAKT,UAAWY,GACbD,GAAU,yBAAKX,UAAU,WAC1B,yBAAKA,UAAU,UAAUU,EAAK,KAWpCF,EAAOS,aAAe,CACpBP,KAAM,OACND,KAAM,SACNE,QAAQ,GAGKH,Q,gCCjCFU,EAAiB,WAC5B,IAAMC,EAAaC,SAASC,eAAe,eACvCF,IACFA,EAAWG,UAAYH,EAAWI,eCE/B,SAASC,EAAaC,EAAMC,GACjC,OAAO,SAACjC,GACNA,EAAS,CAAEJ,KAAM,oBAAqBC,QAASoC,IAC/CC,MAAM,6CAAD,OAA8CF,EAA9C,YAAsDC,IACxDE,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GACLrC,EAAS,CACPJ,KAAM,oBACNC,QAASwC,IAEXZ,QAcD,SAASa,EAAYN,EAAMC,EAAWM,GAC3C,OAAO,SAACvC,EAAUwC,GAChB,IAXsBC,EAWhBC,EAAYF,IAAWG,KAAKD,UAElC1C,GAbsByC,EAcH,CACfT,OACAU,YACAH,UACAK,SAAUX,EACVrC,KAAM,QAlBZ,uCAAO,WAAOI,GAAP,SAAA6C,EAAA,sEACC7C,EAAS,CAAEJ,KAAM,wBAAyBC,QAAS4C,IADpD,OAELhB,IAFK,2CAAP,wDAsBES,MAAM,4CAA6C,CACjDY,OAAQ,OACRC,QAAS,CACPC,OAAQ,mBACR,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBnB,OACAC,YACAM,UACA3C,KAAM,WAGPuC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GACLrC,EAAS,CACPJ,KAAM,wBACNC,QAAQ,aACN6C,aACGL,KAGPZ,QCjDO2B,MAhBf,YAA8B,IAATC,EAAQ,EAARA,KACnB,OACE,0BAAM9C,UAAU,QACb8C,EACC,uBAAG9C,UAAU,kBAAb,YAEA,uBAAGA,UAAU,kBAAb,U,QCmBO+C,MAxBf,YAA+C,IAA3BC,EAA0B,EAA1BA,SAAU3D,EAAgB,EAAhBA,KAAM4D,EAAU,EAAVA,OAK5BC,EAAcrC,IAClB,gBACA,CACE,mBAA6B,YAATxB,GAEtB,CAAE,mBAA6B,YAATA,IAGxB,OAAI4D,EACK,yBAAKjD,UAAWkD,GAAcF,GAEhC,+BCLMG,MAZf,YAA6C,IAArBC,EAAoB,EAApBA,OAAQJ,EAAY,EAAZA,SAC9B,OACE,yBAAKzC,QAAS6C,EAAQpD,UAAU,uBAC7BgD,I,QCoCQK,MApCf,WAA2B,MAIDC,oBAAS,GAJR,mBAIlBC,EAJkB,KAIZC,EAJY,KAiBzB,OACE,kBAACC,EAAA,EAAD,CAAqBC,eALF,WACnBF,GAAQ,KAKN,0BAAMxD,UAAU,UACd,uBAAGA,UAAU,iBAAiBO,QAZR,SAACH,GAC3BA,EAAEuD,kBACFH,GAASD,KAUL,eAIF,kBAAC,EAAD,CAAUlE,KAAK,UAAU4D,OAAQM,GAC/B,kBAAC,EAAD,eACA,kBAAC,EAAD,mB,wBCmCOK,MAxDf,YAAuE,IAAD,IAAnDC,QAAWC,EAAwC,EAAxCA,IAAKC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,YAAarD,EAAY,EAAZA,OAClDsD,EAAUC,cAEVzE,EAAWC,cAEXyE,EAASC,cAAYC,GAErB5C,EAAO7B,aAAY,SAACC,GAAD,OAAWA,EAAMyE,QAAQ7C,QAkB5C8C,EAAU1D,IAAW,UAAW,CACpC,iBAAkBsD,IAAWL,IAG/B,OACE,yBAAK9D,UAAWuE,EAAShE,QAjBA,WAHlBuD,IAAQK,IAKb1E,EAAS+B,EAAaC,EAAMqC,IAC5BG,EAAQO,KAAKV,MAeb,kBAAC,EAAD,CAAQpD,KAAMqD,EAAUpD,OAAQA,IAChC,yBAAKX,UAAU,QACb,yBAAKA,UAAU,QAAQ+D,GACvB,yBAAK/D,UAAU,gBACZ8D,KAAG,OAAKE,QAAL,IAAKA,OAAL,EAAKA,EAAa3B,WACpB,kBAAC,EAAD,CAAWS,KAAMkB,EAAYlB,OAE/B,yBAAK9C,UAAU,mBAAf,OAAkCgE,QAAlC,IAAkCA,OAAlC,EAAkCA,EAAahC,WAGnD,yBAAKhC,UAAU,WACb,0BAAMA,UAAU,gBACbyE,IAAK,OAACT,QAAD,IAACA,OAAD,EAACA,EAAaU,MAAMC,OAAO,UAEnC,kBAAC,EAAD,CAAiBjD,UAAWoC,O,iBCrDpC,SAASc,IACP,OACE,yBAAK5E,UAAU,oBACb,yBAAKA,UAAU,mBACb,kBAAC,IAAD,CAAU6E,OAAQ,IAAKC,MAAO,OAEhC,yBAAK9E,UAAU,iBACb,kBAAC,IAAD,CAAU+E,MAAO,MAcVC,MARf,WAGE,OAFmB,IAAIC,MAAM,GAAGC,KAAK,GAEnBC,KAAI,SAACC,EAAMC,GAC3B,OAAO,kBAACT,EAAD,CAAaU,IAAKD,QC4BdE,MAzCf,WACE,IAAM9F,EAAWC,cAEjB8F,qBAAU,WACR/F,GCNK,SAACA,GACNA,EAAS,CAAEJ,KAAM,0BACjBsC,MAAM,6CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GAAD,OACJrC,EAAS,CACPJ,KAAM,wBACNC,QAASwC,YDAd,CAACrC,IAIJ,IAAMgG,EAAQ7F,aAAY,SAACC,GAAW,IAC5BE,EAAuBF,EAAMC,YAA7BC,mBAER,OAAOF,EAAM6F,SAASD,MAAME,QAAO,SAACP,GAClC,OAGoD,IAFlDA,EAAKrB,SACF6B,cACAC,QAAQ9F,EAAmB6F,qBAK9BE,EAAUlG,aAAY,SAACC,GAAD,OAAWA,EAAM6F,SAASI,WAEtD,OACE,yBAAK9F,UAAU,WACb,yBAAKA,UAAU,iBACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,kBACZ8F,EACC,kBAAC,EAAD,MAEAL,EAAMN,KAAI,SAACC,GACT,OAAO,kBAAC,EAAD,CAASE,IAAKF,EAAKtB,IAAKD,QAASuB,U,wBEjBrCW,MAnBf,YAA8C,IAAvBC,EAAsB,EAAtBA,WAAYC,EAAU,EAAVA,OACjC,OACE,4BAAQjG,UAAU,cAChB,kBAACkG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAeb,IAAKU,EAAYI,QAAS,IAAKvF,WAAW,YACvD,uBAAGb,UAAU,iBAAiBO,QAAS0F,GACpCD,EAAa,OAAS,WCApBK,MARf,WACE,OACE,4BAAQrG,UAAU,cAChB,uBAAGA,UAAU,kBAAb,iB,QCiESsG,MA7Df,WAAoB,MAIYhD,mBAAS,IAJrB,mBAIXtB,EAJW,KAIFuE,EAJE,KAMZ9G,EAAWC,cAEX+B,EAAO7B,aAAY,SAACC,GAAD,OAAWA,EAAMyE,QAAQ7C,QAE5C0C,EAASC,cAAYC,GAErBmC,EAAcC,uBAAY,WACP,IAAnBzE,EAAQ1B,SACVb,EAASsC,EAAYN,EAAM0C,EAAQnC,IACnC0E,OAED,CAAC1E,EAASmC,EAAQ1C,IAQfiF,EAAQ,WACZH,EAAW,KAoBb,OAdAI,YAAW,eAAe,SAACC,GACzBA,EAAMC,iBACNN,GAAW,SAACvE,GAAD,OAAaA,EAAU,WAGpC2E,YACE,SACA,SAACvG,GACCA,EAAEyG,iBACFL,MAEF,CAACxE,IAID,yBAAKhC,UAAU,cACb,kBAAC,IAAD,CACEG,SA5Be,SAACC,GACpBmG,EAAWnG,EAAEC,OAAOH,QA4BhBA,MAAO8B,EACPhC,UAAU,YACVC,YAAY,qBACZ6G,QAAQ,MAEV,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAad,WAAYhE,EAAQ1B,OAAS,EAAG2F,OAAQO,MCxB5CO,MAlCf,WACE,IAAMtH,EAAWC,cAMXC,EAAcC,aAAY,SAACC,GAAD,OAAWA,EAAMC,YAAYH,eAUvDqH,EAAapH,aAAY,SAACC,GAAD,OAAWA,EAAMC,YAAYkH,cAE5D,OACE,yBAAKhH,UAAWgH,EAAa,iBAAmB,wBAC9C,yBAAKhH,UAAU,aAAaO,QAlBP,WACvBd,EhBEK,CAAEJ,KAAM,8BgBgBT,uBAAGW,UAAU,kBAAb,WAEF,2BAAOE,MAAOP,EAAaQ,SAfV,SAACC,GACpBX,EAASN,EAAeiB,EAAEC,OAAOH,WAeP,IAAvBP,EAAYW,QACX,uBAAGC,QAbW,WAClBd,EAASN,EAAe,MAYKa,UAAU,wBAAnC,WCrBOiH,MAVf,WACE,OACE,0BAAMjH,UAAU,YAAhB,WAEE,uBAAGA,UAAU,+BAAb,aAFF,QCDJ,SAASkH,EAAT,GAAiC,IAAjBxG,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,OACpB,OACE,yBAAKX,UAAU,eACb,yBAAKA,UAAU,aACZU,EACAC,GAAU,yBAAKX,UAAU,aAWlCkH,EAAKjG,aAAe,CAClBP,KAAM,gBACNC,QAAQ,GAEKuG,QCkCAC,MAhDf,WACE,IAAMhD,EAASC,cAAYC,GAErB5E,EAAWC,cAEXoG,EAAUlG,aAAY,SAACC,GAAD,OAAWA,EAAMuC,KAAK0D,WAW5CxB,EAAU1E,aAAY,SAACC,GAAD,OAC1BA,EAAM6F,SAASD,MAAM2B,MAAK,SAAChC,GACzB,OAAOjB,IAAWiB,EAAKtB,UAI3B,OACE,yBAAK9D,UAAU,iBACb,yBAAKA,UAAU,iBACb,kBAAC,EAAD,OAED8F,EACC,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAAMpF,KAAI,OAAE4D,QAAF,IAAEA,OAAF,EAAEA,EAASP,SAAUpD,OAAM,OAAE2D,QAAF,IAAEA,OAAF,EAAEA,EAAS3D,SAElD,yBAAKX,UAAU,gBACb,uBAAGA,UAAU,uBAAuBO,QAxBtB,WAClBd,EnBdK,CAAEJ,KAAM,0BmBqCT,a,gBCaOgI,MA9Cf,YAAyC,IAAdC,EAAa,EAAbA,UACnB7H,EAAWC,cADqB,EAGd4D,oBAAS,GAHK,mBAG/BC,EAH+B,KAGzBC,EAHyB,KAkBhC+D,EAAc1G,IAAW,sBAAuB,CACpD,gBAAiB0C,IAOnB,OACE,kBAACE,EAAA,EAAD,CAAqBC,eALF,WACnBF,GAAQ,KAKN,yBAAKxD,UAAWuH,EAAahH,QArBL,WAC1BiD,GAASD,KAqBL,uBAAGvD,UAAU,kBAAb,wBAEF,kBAAC,EAAD,CAAUX,KAAK,UAAU4D,OAAQM,GAC/B,kBAAC,EAAD,CAAcH,OArBE,WACpB3D,EhBuDG,SAAwB6H,GAC7B,OAAO,SAAC7H,GACNA,EAAS,CACPJ,KAAM,yBACNC,QAASgI,IAEX3F,MAAM,4CAA6C,CACjDY,OAAQ,SACRC,QAAS,CACPC,OAAQ,mBACR,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU0E,KAEpB1F,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GAAD,OACJrC,EAAS,CACPJ,KAAM,yBACNC,QAASwC,QgBzEN0F,CAAeF,MAoBpB,aCROG,MA5Bf,YAAqC,IAAZC,EAAW,EAAXA,QACvB,OACE,yBAAK1H,UAAU,2BACb,yBAAKA,UAAU,WACZ0H,EAAQ1F,QAAQ2F,MAAM,MAAMxC,KAAI,SAACyC,EAAMvC,GACtC,OACE,yBAAKC,IAAKD,GACPuC,EACD,iCAIN,yBAAK5H,UAAU,QACb,6BAAMyE,IAAMiD,EAAQhD,MAAMC,OAAO,UAChC+C,EAAQG,QACP,0BAAM7H,UAAU,SACd,uBAAGA,UAAU,mBAAb,UAGF,kBAAC,EAAD,CAAW8C,KAAM4E,EAAQ5E,QAG7B,kBAAC,EAAD,CAAiBwE,UAAWI,EAAQ5D,SCK7BgE,MAzBf,YAAoC,IAAZJ,EAAW,EAAXA,QAChBvD,EAASC,cAAYC,GAInBN,EAAanE,aAAY,SAACC,GAAD,OAC/BA,EAAM6F,SAASD,MAAM2B,MAAK,SAAChC,GACzB,OAAOjB,IAAWiB,EAAKtB,UAFnBC,SAMR,OACE,yBAAK/D,UAAU,wBACb,kBAAC,EAAD,CAAQS,KAAK,QAAQC,KAAMqD,IAC3B,yBAAK/D,UAAU,WACZ0H,EAAQ1F,QACT,yBAAKhC,UAAU,QACb,6BAAMyE,IAAMiD,EAAQhD,MAAMC,OAAO,WAEnC,kBAAC,EAAD,CAAiB2C,UAAWI,EAAQ5D,SCpB5C,SAASiE,GAAT,GAAmC,IAAZL,EAAW,EAAXA,QASrB,OARa9H,aAAY,SAACC,GAAD,OAAWA,EAAMyE,QAAQ7C,UAMtBiG,EAAQrF,SAK7B,kBAAC,EAAD,CAAcqF,QAASA,IAFrB,kBAAC,EAAD,CAAeA,QAASA,IAKnCK,GAAYC,SAAW,CAAEN,QAASO,IAAUC,QAE7BH,UCZAI,OARf,YAAmC,IAAZnG,EAAW,EAAXA,QACrB,OAAO,yBAAKhC,UAAU,oBAAoBgC,ICY7BoG,OAXf,YAA+B,IAAZV,EAAW,EAAXA,QACjB,MAAqB,SAAjBA,EAAQrI,KACH,kBAAC,GAAD,CAAaqI,QAASA,IAExB,kBAAC,GAAD,CAAa1F,QAAS0F,EAAQ1F,WCCxBqG,OARf,WACE,OACE,yBAAKrI,UAAU,aACb,2ECsDSsI,OAlDf,WACE,IAAM7I,EAAWC,cAKX+F,EAAQ7F,aAAY,SAACC,GACzB,OAAOA,EAAMuC,KAAKqD,MAAME,QAAO,SAACP,GAC9B,OAG+D,IAF7DA,EAAKpD,QACF4D,cACAC,QAAQhG,EAAMC,YAAYH,YAAYiG,qBAKzCnE,EAAO7B,aAAY,SAACC,GAAD,OAAWA,EAAMyE,QAAQ7C,QAE5CqE,EAAUlG,aAAY,SAACC,GAAD,OAAWA,EAAMuC,KAAK0D,WAE5C3B,EAASC,cAAYC,GAU3B,OANAmB,qBAAU,WACJrB,GACF1E,EAAS+B,EAAaC,EAAM0C,MAE7B,CAAC1E,EAAU0E,EAAQ1C,IAEjB0C,EAKH,yBAAKnE,UAAU,eACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,aAAaqE,GAAG,gBAC3ByB,GACAL,EAAMN,KAAI,SAACuC,EAASrC,GAClB,OAAO,kBAAC,GAAD,CAASC,IAAKD,EAAOqC,QAASA,QAG3C,yBAAK1H,UAAU,eACb,kBAAC,EAAD,QAbG,kBAAC,GAAD,OCfIuI,OAtBf,YAA8B,IAAZC,EAAW,EAAXA,QAChB,OACE,yBAAKxI,UAAU,kBACb,0BAAMA,UAAU,kBAAhB,UACA,yBAAKA,UAAU,gBACZwI,GACCC,OAAOC,KAAKF,GAASrD,KAAI,SAACwD,EAAQtD,GAChC,OACE,yBAAKC,IAAKD,EAAOrF,UAAU,sBACzB,uBAAGA,UAAS,iBAAY2I,KAD1B,IACwCH,EAAQG,UCT9D,SAASC,GAAT,GAA8B,IAAbC,EAAY,EAAZA,SACf,OACE,yBAAK7I,UAAU,iBACb,0BAAMA,UAAU,kBAAhB,SACA,yBAAKA,UAAU,cACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,cACf,yBAAKA,UAAU,cAAc6I,MAWvCD,GAAM3H,aAAe,CACnB4H,SAAU,YAGGD,UCDAE,OAtBf,WACE,OACE,yBAAK9I,UAAU,iBACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,UACb,uBAAGA,UAAU,kBAAb,UAGJ,yBAAKA,UAAU,eACb,yBAAKA,UAAU,UACb,uBAAGA,UAAU,kBAAb,cAGJ,yBAAKA,UAAU,eACb,yBAAKA,UAAU,UACb,uBAAGA,UAAU,kBAAb,YCkDK+I,OAzDf,WACE,IAAMtJ,EAAWC,cAEXyE,EAASC,cAAYC,GAKrB2E,EAAcpJ,aAClB,SAACC,GAAD,OAAWA,EAAMC,YAAYmJ,sBAMzB3E,EAAU1E,aAAY,SAACC,GAAD,OAC1BA,EAAM6F,SAASD,MAAM2B,MAAK,SAAChC,GACzB,OAAOjB,IAAWiB,EAAKtB,UAIrBgC,EAAUlG,aAAY,SAACC,GAAD,OAAWA,EAAM6F,SAASI,WAkBtD,OAbAa,YACE,WACA,WACElH,E/BlCG,CAAEJ,KAAM,0B+BoCb,CACEsG,OAAQ,kBAAM,KAOdG,IAAY3B,EACP,KAIP,yBAAKnE,UAAWgJ,EAAc,sBAAwB,kBACpD,yBAAKhJ,UAAU,gBACb,kBAAC,EAAD,CAAQS,KAAM,QAASC,KAAI,OAAE4D,QAAF,IAAEA,OAAF,EAAEA,EAASP,WACtC,yBAAK/D,UAAU,gBAAf,OAA+BsE,QAA/B,IAA+BA,OAA/B,EAA+BA,EAASP,UACxC,yBAAK/D,UAAU,YAAf,WAA4BsE,QAA5B,IAA4BA,OAA5B,EAA4BA,EAAS4E,UACrC,kBAAC,GAAD,OAEF,kBAAC,GAAD,CAAQV,QAAO,OAAElE,QAAF,IAAEA,OAAF,EAAEA,EAASkE,UAC1B,kBAAC,GAAD,CAAOK,SAAU,mB,SChCRM,OAtBf,WACE,IAAM1J,EAAWC,cAQjB,OANA8F,qBAAU,WACR/F,GCPK,SAACA,GACNA,EAAS,CAAEJ,KAAM,2BACjBsC,MAAM,4CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GAAD,OACJrC,EAAS,CACPJ,KAAM,yBACNC,QAASwC,YDCd,CAACrC,KAEgBG,aAAY,SAACC,GAAD,OAAWA,EAAMyE,QAAQ8E,gBAIrD,kBAAC,KAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,SACV,kBAAC,EAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,S,qDEvBJC,GAAe,CACnB7D,MAAO,GACPK,SAAS,EACT3D,UAAW,EACXoH,UAAU,GCJZ,IAAMD,GAAe,CACnB7H,KAAM,GACN2H,aAAa,GCFf,IAAME,GAAe,CACnB7D,MAAO,GACP1F,mBAAoB,GACpB+F,SAAS,G,aCHLwD,GAAe,CACnBtC,YAAY,EACZrH,YAAa,GACbI,mBAAoB,GACpBkJ,oBAAoB,GCOtB,IAAMO,GAASC,wBAAa,CAC1BC,WAAW,EACXC,MAAM,IAMFC,GAAWC,aAAgB,CAAEzH,KJZpB,WAA6C,IAA/BvC,EAA8B,uDAAtByJ,GAAclG,EAAQ,uCACzD,OAAQA,EAAO/D,MACb,IAAK,oBACH,OAAO,2BACFQ,GADL,IAEEiK,MAAM,EACNhE,SAAS,IAEb,IAAK,oBACH,OAAO,2BACFjG,GADL,IAEE4F,MAAOrC,EAAO9D,QACdwG,SAAS,IAEb,IAAK,wBACH,IAAMiE,EAAW,2BACZ3G,EAAO9D,SADK,IAEfuI,SAAS,IAEX,OAAO,2BACFhI,GADL,IAEEsC,UAAWtC,EAAMsC,UAAY,EAC7BsD,MAAM,GAAD,oBAAM5F,EAAM4F,OAAZ,CAAmBsE,MAE5B,IAAK,wBACH,OAAO,2BACFlK,GADL,IAEE4F,MAAO5F,EAAM4F,MAAMN,KAAI,SAACC,GACtB,OAAIA,EAAKjD,YAAciB,EAAO9D,QAAQ6C,UAC7B,2BACFiD,GADL,IAEEyC,SAAS,EACT/D,IAAKV,EAAO9D,QAAQwE,MAGjBsB,OAGb,IAAK,yBACH,OAAO,2BACFvF,GADL,IAEE4F,MAAO5F,EAAM4F,MAAME,QAAO,SAACP,GAAD,OAAUA,EAAKtB,MAAQV,EAAO9D,WACxDiK,UAAU,IAEd,IAAK,yBACH,OAAO,2BACF1J,GADL,IAEE4F,MAAOrC,EAAO9D,QACdiK,UAAU,IAEd,QACE,OAAO1J,IIvC4ByE,QHd1B,WAAgD,IAA/BzE,EAA8B,uDAAtByJ,GAAclG,EAAQ,uCAC5D,OAAQA,EAAO/D,MACb,IAAK,yBACH,OAAO,2BACFQ,GADL,IAEEuJ,aAAa,IAEjB,IAAK,yBACH,OAAO,2BACFvJ,GADL,IAEE4B,KAAM2B,EAAO9D,QAAQwE,IACrBsF,aAAa,IAEjB,QACE,OAAOvJ,IGAqC6F,SFbnC,WAAiD,IAA/B7F,EAA8B,uDAAtByJ,GAAclG,EAAQ,uCAC7D,OAAQA,EAAO/D,MACb,IAAK,wBACH,OAAO,2BACFQ,GADL,IAEEiG,SAAS,IAEb,IAAK,wBACH,OAAO,2BACFjG,GADL,IAEE4F,MAAOrC,EAAO9D,QACdwG,SAAS,IAEb,QACE,OAAOjG,IED+CC,YDZ7C,WAAoD,IAA/BD,EAA8B,uDAAtByJ,GAAclG,EAAQ,uCAChE,OAAQA,EAAO/D,MACb,IAAK,sBACH,OAAO,2BACFQ,GADL,IAEEoJ,oBAAqBpJ,EAAMoJ,qBAE/B,IAAK,0BACH,OAAO,2BACFpJ,GADL,IAEEmH,YAAanH,EAAMmH,aAEvB,IAAK,+BACH,OAAO,2BACFnH,GADL,IAEEF,YAAayD,EAAO9D,UAExB,IAAK,+BACH,OAAO,2BACFO,GADL,IAEEE,mBAAoBqD,EAAO9D,UAE/B,QACE,OAAOO,MCNAmK,GAAQC,aAAYL,GAAUM,aAAgBC,KAAOX,KCdlEY,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUN,MAAOA,IACf,yBAAKhK,UAAU,aACb,kBAAC,GAAD,SAINoB,SAASC,eAAe,W","file":"static/js/main.b921d16f.chunk.js","sourcesContent":["/**\n * Открытие и закрытие окна профиля\n * @returns {{type: string}}\n */\nexport function profileToggled() {\n  return { type: \"profile/open/toggle\" };\n}\n\n/**\n * Открытие и закрытие поисковика сообщений\n * @returns {{type: string}}\n */\nexport function searchOpened() {\n  return { type: \"search/show/hide/toggle\" };\n}\n\n/**\n * Поиск сообщений\n */\nexport function searchMessages(inputValue) {\n  return { type: \"messages/searchRequest/start\", payload: inputValue };\n}\n/**\n * Поиск контактов\n */\nexport function searchContacts(inputValue) {\n  return { type: \"contacts/searchRequest/start\", payload: inputValue };\n}\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { searchContacts } from \"../../redux/actions/application\";\n\nfunction Search() {\n  /**\n   * Хук редакса\n   */\n  const dispatch = useDispatch();\n  /**\n   * Значение поля ввода\n   */\n  const searchValue = useSelector(\n    (state) => state.application.contactSearchValue\n  );\n  /**\n   * Передача данных из поля ввода\n   * @param e\n   */\n  const handleChange = (e) => {\n    dispatch(searchContacts(e.target.value));\n  };\n  /**\n   * Очистка поля ввода\n   */\n  const clearSearch = () => {\n    dispatch(searchContacts(\"\"));\n  };\n\n  return (\n    <div className=\"search-contact\">\n      <i className=\"material-icons\">search</i>\n      <input\n        placeholder=\"Search Contact\"\n        value={searchValue}\n        onChange={handleChange}\n      />\n      {searchValue.length !== 0 && (\n        <i onClick={clearSearch} className=\"material-icons click\">\n          clear\n        </i>\n      )}\n    </div>\n  );\n}\n\nexport default Search;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\n\nfunction Avatar({ size, name, online }) {\n  /**\n   * Смена классов с определенным размером\n   * @returns {string}\n   */\n  const switchClass = classNames(\n    \"avatar\",\n    { small: size === \"small\" },\n    { medium: size === \"medium\" },\n    { large: size === \"large\" }\n  );\n\n  return (\n    <div className={switchClass}>\n      {online && <div className=\"online\" />}\n      <div className=\"m-auto\">{name[0]}</div>\n    </div>\n  );\n}\n\nAvatar.propTypes = {\n  size: PropTypes.string,\n  online: PropTypes.bool,\n  name: PropTypes.string.isRequired,\n};\n\nAvatar.defaultProps = {\n  name: \"Name\",\n  size: \"medium\",\n  online: false,\n};\n\nexport default Avatar;\n","/**\n * Получение узла окна чата и прокрутка чата до конца\n */\nexport const scrollChatDown = () => {\n  const chatWindow = document.getElementById(\"chat-window\");\n  if (chatWindow) {\n    chatWindow.scrollTop = chatWindow.scrollHeight;\n  }\n};\n","/**\n * Загрузка сообщений\n * @param myId\n * @param contactId\n * @returns {function(*): void}\n */\nimport { scrollChatDown } from \"../../utils/dom\";\n\nexport function loadMessages(myId, contactId) {\n  return (dispatch) => {\n    dispatch({ type: \"chat/load/started\", payload: contactId });\n    fetch(`https://api.intocode.ru:8001/api/messages/${myId}/${contactId}`)\n      .then((response) => response.json())\n      .then((json) => {\n        dispatch({\n          type: \"chat/load/succeed\",\n          payload: json,\n        });\n        scrollChatDown();\n      });\n  };\n}\n\nfunction sentMessageBegin(messageObject) {\n  return async (dispatch) => {\n    await dispatch({ type: \"messages/send/started\", payload: messageObject });\n    scrollChatDown();\n  };\n}\n/**\n * Добавление сообщения\n */\nexport function sentMessage(myId, contactId, content) {\n  return (dispatch, getState) => {\n    const requestId = getState().chat.requestId;\n\n    dispatch(\n      sentMessageBegin({\n        myId,\n        requestId,\n        content,\n        toUserId: contactId,\n        type: \"text\",\n      })\n    );\n\n    fetch(\"https://api.intocode.ru:8001/api/messages\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        myId,\n        contactId,\n        content,\n        type: \"text\",\n      }),\n    })\n      .then((response) => response.json())\n      .then((json) => {\n        dispatch({\n          type: \"messages/send/succeed\",\n          payload: {\n            requestId,\n            ...json,\n          },\n        });\n        scrollChatDown();\n      });\n  };\n}\n\n/**\n * Удаление сообщения\n */\nexport function deletedMessage(messageId) {\n  return (dispatch) => {\n    dispatch({\n      type: \"message/delete/started\",\n      payload: messageId,\n    });\n    fetch(\"https://api.intocode.ru:8001/api/messages\", {\n      method: \"DELETE\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(messageId),\n    })\n      .then((response) => response.json())\n      .then((json) =>\n        dispatch({\n          type: \"message/delete/succeed\",\n          payload: json,\n        })\n      );\n  };\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction CheckRead({ read }) {\n  return (\n    <span className=\"read\">\n      {read ? (\n        <i className=\"material-icons\">done_all</i>\n      ) : (\n        <i className=\"material-icons\">done</i>\n      )}\n    </span>\n  );\n}\n\nCheckRead.propTypes = {\n  read: PropTypes.bool,\n};\n\nexport default CheckRead;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\n\nfunction Dropdown({ children, type, isShow }) {\n  /**\n   * Смена классов относительно типа меню\n   * @type {string}\n   */\n  const typeClasses = classNames(\n    \"dropdown-menu\",\n    {\n      \"dropdown-contact\": type === \"contact\",\n    },\n    { \"dropdown-message\": type === \"message\" }\n  );\n\n  if (isShow) {\n    return <div className={typeClasses}>{children}</div>;\n  }\n  return <div></div>;\n}\n\nDropdown.propTypes = {\n  type: PropTypes.string,\n  isShow: PropTypes.bool,\n};\n\nexport default Dropdown;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction DropdownItem({ action, children }) {\n  return (\n    <div onClick={action} className=\"dropdown-item click\">\n      {children}\n    </div>\n  );\n}\n\nDropdownItem.propTypes = {\n  action: PropTypes.func,\n};\n\nexport default DropdownItem;\n","import React, { useState } from \"react\";\nimport Dropdown from \"../dropdown/Dropdown\";\nimport DropdownItem from \"../dropdown/DropdownItem\";\nimport PropTypes from \"prop-types\";\nimport OutsideClickHandler from \"react-outside-click-handler/esm/OutsideClickHandler\";\n\nfunction DropdownContact() {\n  /**\n   * Состояние открытия или закрытия меню\n   */\n  const [show, setShow] = useState(false);\n  /**\n   * Открытие и закрытие выпадающего меню\n   */\n  const handleClickDropIcon = (e) => {\n    e.stopPropagation();\n    setShow(!show);\n  };\n\n  const hideDropdown = () => {\n    setShow(false);\n  };\n\n  return (\n    <OutsideClickHandler onOutsideClick={hideDropdown}>\n      <span className=\"option\">\n        <i className=\"material-icons\" onClick={handleClickDropIcon}>\n          more_horiz\n        </i>\n      </span>\n      <Dropdown type=\"contact\" isShow={show}>\n        <DropdownItem>Delete</DropdownItem>\n        <DropdownItem>Archive</DropdownItem>\n      </Dropdown>\n    </OutsideClickHandler>\n  );\n}\n\nDropdownContact.propTypes = {\n  contactId: PropTypes.string,\n};\n\nexport default DropdownContact;\n","import React from \"react\";\nimport Avatar from \"../profile/Avatar\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { loadMessages } from \"../../redux/actions/chat\";\nimport CheckRead from \"../chat/message/CheckRead\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport DropdownContact from \"./DropdownContact\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport dayjs from \"dayjs\";\n\nfunction Contact({ contact: { _id, fullname, lastMessage, online } }) {\n  const history = useHistory();\n\n  const dispatch = useDispatch();\n\n  const opened = useParams().id;\n\n  const myId = useSelector((state) => state.profile.myId);\n\n  const isAlreadyOpenedContact = () => {\n    return _id === opened;\n  };\n\n  const handleClickContact = () => {\n    if (!isAlreadyOpenedContact()) {\n      dispatch(loadMessages(myId, _id));\n      history.push(_id);\n    }\n  };\n\n  /**\n   * Проверка активного чата и применение соответствующего класса\n   * @returns {string}\n   *\n   */\n  const classes = classNames(\"contact\", {\n    \"active-contact\": opened === _id,\n  });\n\n  return (\n    <div className={classes} onClick={handleClickContact}>\n      <Avatar name={fullname} online={online} />\n      <div className=\"info\">\n        <div className=\"name\">{fullname}</div>\n        <div className=\"last-message\">\n          {_id === lastMessage?.toUserId && (\n            <CheckRead read={lastMessage.read} />\n          )}\n          <div className=\"contact-content\">{lastMessage?.content}</div>\n        </div>\n      </div>\n      <div className=\"options\">\n        <span className=\"date-contact\">\n          {dayjs(lastMessage?.time).format(\"hh:mm\")}\n        </span>\n        <DropdownContact contactId={_id} />\n      </div>\n    </div>\n  );\n}\n\n/**\n * Объявление пропса на соответствие определённому JS-типу.\n */\nContact.propTypes = { contact: PropTypes.object };\n\nexport default Contact;\n","import React from \"react\";\nimport Skeleton from \"react-loading-skeleton\";\n\nfunction SkeletonRow() {\n  return (\n    <div className=\"contact-skeleton\">\n      <div className=\"avatar-skeleton\">\n        <Skeleton height={100} width={100} />\n      </div>\n      <div className=\"info-skeleton\">\n        <Skeleton count={2} />\n      </div>\n    </div>\n  );\n}\n\nfunction SkeletonContact() {\n  const emptyArray = new Array(9).fill(1);\n\n  return emptyArray.map((item, index) => {\n    return <SkeletonRow key={index} />;\n  });\n}\n\nexport default SkeletonContact;\n","import React, { useEffect } from \"react\";\nimport Search from \"./Search\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { loadContacts } from \"../../redux/actions/contacts\";\nimport Contact from \"./Contact\";\nimport SkeletonContact from \"./SkeletonContact\";\n\nfunction Sidebar() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadContacts());\n  }, [dispatch]);\n  /**\n   * Получение данных о контактах и Фильтрация массива по запросу поиска\n   */\n  const items = useSelector((state) => {\n    const { contactSearchValue } = state.application;\n\n    return state.contacts.items.filter((item) => {\n      return (\n        item.fullname\n          .toUpperCase()\n          .indexOf(contactSearchValue.toUpperCase()) !== -1\n      );\n    });\n  });\n\n  const loading = useSelector((state) => state.contacts.loading);\n\n  return (\n    <div className=\"sidebar\">\n      <div className=\"search-parent\">\n        <Search />\n      </div>\n      <div className=\"contacts-block\">\n        {loading ? (\n          <SkeletonContact />\n        ) : (\n          items.map((item) => {\n            return <Contact key={item._id} contact={item} />;\n          })\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Sidebar;\n","/**\n * Получене списка контактов\n * @returns {function(*): void}\n */\nexport function loadContacts() {\n  return (dispatch) => {\n    dispatch({ type: \"contacts/load/started\" });\n    fetch(\"https://api.intocode.ru:8001/api/contacts\")\n      .then((response) => response.json())\n      .then((json) =>\n        dispatch({\n          type: \"contacts/load/succeed\",\n          payload: json,\n        })\n      );\n  };\n}\n","import React from \"react\";\nimport { CSSTransition, SwitchTransition } from \"react-transition-group\";\nimport PropTypes from \"prop-types\";\n\nfunction SendButtons({ hasMessage, onSend }) {\n  return (\n    <button className=\"send click\">\n      <SwitchTransition>\n        <CSSTransition key={hasMessage} timeout={100} classNames=\"sendIcon\">\n          <i className=\"material-icons\" onClick={onSend}>\n            {hasMessage ? \"send\" : \"mic\"}\n          </i>\n        </CSSTransition>\n      </SwitchTransition>\n    </button>\n  );\n}\n\nSendButtons.propTypes = {\n  hasMessage: PropTypes.bool,\n  onSend: PropTypes.func.isRequired,\n};\n\nexport default SendButtons;\n","import React from \"react\";\n\nfunction FileButton() {\n  return (\n    <button className=\"send click\">\n      <i className=\"material-icons\">attach_file</i>\n    </button>\n  );\n}\n\nexport default FileButton;\n","import React, { useCallback, useState } from \"react\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { sentMessage } from \"../../redux/actions/chat\";\nimport SendButtons from \"./SendButtons\";\nimport FileButton from \"./FileButton\";\nimport { useParams } from \"react-router-dom\";\nimport { useHotkeys } from \"react-hotkeys-hook\";\n\nfunction SendForm() {\n  /**\n   * Значение поля ввода\n   */\n  const [content, setContent] = useState(\"\");\n\n  const dispatch = useDispatch();\n\n  const myId = useSelector((state) => state.profile.myId);\n\n  const opened = useParams().id;\n\n  const sendMessage = useCallback(() => {\n    if (content.length !== 0) {\n      dispatch(sentMessage(myId, opened, content));\n      clear();\n    }\n  }, [content, opened, myId]);\n  /**\n   * Передача значения поля ввода в редакс\n   */\n  const handleChange = (e) => {\n    setContent(e.target.value);\n  };\n\n  const clear = () => {\n    setContent(\"\");\n  };\n\n  /**\n   * Перенос строки при клике на shift+enter\n   */\n  useHotkeys(\"shift+enter\", (event) => {\n    event.preventDefault();\n    setContent((content) => content + \"\\n\");\n  });\n\n  useHotkeys(\n    \"enter\",\n    (e) => {\n      e.preventDefault();\n      sendMessage();\n    },\n    [content]\n  );\n\n  return (\n    <div className=\"form-block\">\n      <TextareaAutosize\n        onChange={handleChange}\n        value={content}\n        className=\"send-form\"\n        placeholder=\"Write a message...\"\n        maxRows=\"5\"\n      />\n      <FileButton />\n      <SendButtons hasMessage={content.length > 0} onSend={sendMessage} />\n    </div>\n  );\n}\n\nexport default SendForm;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  searchMessages,\n  searchOpened,\n} from \"../../../redux/actions/application\";\n\nfunction SearchMessage() {\n  const dispatch = useDispatch();\n\n  const searchOpenToggle = () => {\n    dispatch(searchOpened());\n  };\n\n  const searchValue = useSelector((state) => state.application.searchValue);\n\n  const handleChange = (e) => {\n    dispatch(searchMessages(e.target.value));\n  };\n\n  const clearSearch = () => {\n    dispatch(searchMessages(\"\"));\n  };\n\n  const searchOpen = useSelector((state) => state.application.searchOpen);\n\n  return (\n    <div className={searchOpen ? \"search-message\" : \"search-message-close\"}>\n      <div className=\"icon click\" onClick={searchOpenToggle}>\n        <i className=\"material-icons\">search</i>\n      </div>\n      <input value={searchValue} onChange={handleChange} />\n      {searchValue.length !== 0 && (\n        <i onClick={clearSearch} className=\"material-icons click\">\n          clear\n        </i>\n      )}\n    </div>\n  );\n}\n\nexport default SearchMessage;\n","import React from \"react\";\n\nfunction Updating() {\n  return (\n    <span className=\"updating\">\n      Updating\n      <i className=\"material-icons loading-chat\">autorenew</i>\n      ...\n    </span>\n  );\n}\n\nexport default Updating;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction Name({ name, online }) {\n  return (\n    <div className=\"header-name\">\n      <div className=\"name-info\">\n        {name}\n        {online && <div className=\"online\"></div>}\n      </div>\n    </div>\n  );\n}\n\nName.propTypes = {\n  name: PropTypes.string,\n  online: PropTypes.bool,\n};\n\nName.defaultProps = {\n  name: \"Name Lastname\",\n  online: false,\n};\nexport default Name;\n","import React from \"react\";\nimport SearchMessage from \"./SearchMessage\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Updating from \"./Updating\";\nimport Name from \"./Name\";\nimport PropTypes from \"prop-types\";\nimport { profileToggled } from \"../../../redux/actions/application\";\nimport { useParams } from \"react-router-dom\";\n\nfunction Header() {\n  const opened = useParams().id;\n\n  const dispatch = useDispatch();\n\n  const loading = useSelector((state) => state.chat.loading);\n  /**\n   * Функция открытия и закрытия окна профиля\n   */\n  const handleClick = () => {\n    dispatch(profileToggled());\n  };\n\n  /**\n   * Данные о профиле кликнутого контакта\n   */\n  const profile = useSelector((state) =>\n    state.contacts.items.find((item) => {\n      return opened === item._id;\n    })\n  );\n\n  return (\n    <div className=\"header-parent\">\n      <div className=\"header-search\">\n        <SearchMessage />\n      </div>\n      {loading ? (\n        <Updating />\n      ) : (\n        <Name name={profile?.fullname} online={profile?.online} />\n      )}\n      <div className=\"profile-open\">\n        <i className=\"material-icons click\" onClick={handleClick}>\n          person\n        </i>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Объявление пропса на соответствие определённому JS-типу.\n */\nHeader.propTypes = {\n  loading: PropTypes.bool,\n};\n\nexport default Header;\n","import React, { useState } from \"react\";\nimport Dropdown from \"../../dropdown/Dropdown\";\nimport DropdownItem from \"../../dropdown/DropdownItem\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport OutsideClickHandler from \"react-outside-click-handler/esm/OutsideClickHandler\";\nimport { useDispatch } from \"react-redux\";\nimport { deletedMessage } from \"../../../redux/actions/chat\";\n\nfunction MessageDropdown({ messageId }) {\n  const dispatch = useDispatch();\n\n  const [show, setShow] = useState(false);\n  /**\n   * Открытие и закрытие выпадающего меню\n   */\n  const handleClickDropIcon = () => {\n    setShow(!show);\n  };\n\n  const deleteMessage = () => {\n    dispatch(deletedMessage(messageId));\n  };\n  /**\n   * Смена классов иконки при открытии  меню и закрытии\n   * @type {string}\n   */\n  const openClasses = classNames(\"dropdown-icon-close\", {\n    \"dropdown-icon\": show,\n  });\n\n  const hideDropdown = () => {\n    setShow(false);\n  };\n\n  return (\n    <OutsideClickHandler onOutsideClick={hideDropdown}>\n      <div className={openClasses} onClick={handleClickDropIcon}>\n        <i className=\"material-icons\">keyboard_arrow_down</i>\n      </div>\n      <Dropdown type=\"message\" isShow={show}>\n        <DropdownItem action={deleteMessage}>Delete</DropdownItem>\n      </Dropdown>\n    </OutsideClickHandler>\n  );\n}\n\n/**\n * Объявление пропса на соответствие определённому JS-типу.\n * @type {{messageId: <string>}}\n */\nMessageDropdown.propTypes = {\n  messageId: PropTypes.string,\n};\n\nexport default MessageDropdown;\n","import React from \"react\";\nimport CheckRead from \"./CheckRead\";\nimport MessageDropdown from \"./MessageDropdown\";\nimport dayjs from \"dayjs\";\n\nfunction OutboxMessage({ message }) {\n  return (\n    <div className=\"my-message-block margin\">\n      <div className=\"message\">\n        {message.content.split(\"\\n\").map((part, index) => {\n          return (\n            <div key={index}>\n              {part}\n              <br />\n            </div>\n          );\n        })}\n        <div className=\"date\">\n          <div>{dayjs(message.time).format(\"hh:mm\")}</div>\n          {message.sending ? (\n            <span className=\"timer\">\n              <i className=\"material-icons \">timer</i>\n            </span>\n          ) : (\n            <CheckRead read={message.read} />\n          )}\n        </div>\n        <MessageDropdown messageId={message._id} />\n      </div>\n    </div>\n  );\n}\n\nexport default OutboxMessage;\n","import React from \"react\";\nimport Avatar from \"../../profile/Avatar\";\nimport MessageDropdown from \"./MessageDropdown\";\nimport { useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport dayjs from \"dayjs\";\n\nfunction InboxMessage({ message }) {\n  const opened = useParams().id;\n  /**\n   * Данные о профиле кликнутого контакта\n   */\n  const { fullname } = useSelector((state) =>\n    state.contacts.items.find((item) => {\n      return opened === item._id;\n    })\n  );\n\n  return (\n    <div className=\"message-block margin\">\n      <Avatar size=\"small\" name={fullname} />\n      <div className=\"message\">\n        {message.content}\n        <div className=\"date\">\n          <div>{dayjs(message.time).format(\"hh:mm\")}</div>\n        </div>\n        <MessageDropdown messageId={message._id} />\n      </div>\n    </div>\n  );\n}\n\nexport default InboxMessage;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport OutboxMessage from \"./OutboxMessage\";\nimport InboxMessage from \"./InboxMessage\";\n\nfunction TextMessage({ message }) {\n  const myId = useSelector((state) => state.profile.myId);\n\n  /**\n   * Проверка исходящее ли сообщение сообщение\n   * @type {boolean}\n   */\n  const isOutgoing = myId === message.toUserId;\n\n  if (!isOutgoing) {\n    return <OutboxMessage message={message} />;\n  }\n  return <InboxMessage message={message} />;\n}\n\nTextMessage.propType = { message: PropTypes.object };\n\nexport default TextMessage;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction InfoMessage({ content }) {\n  return <div className=\"type-info margin\">{content}</div>;\n}\n\nInfoMessage.propTypes = {\n  content: PropTypes.string,\n};\n\nexport default InfoMessage;\n","import React from \"react\";\nimport TextMessage from \"./TextMessage\";\nimport InfoMessage from \"./InfoMessage\";\nimport PropTypes from \"prop-types\";\n\nfunction Message({ message }) {\n  if (message.type === \"text\") {\n    return <TextMessage message={message} />;\n  }\n  return <InfoMessage content={message.content} />;\n}\n\nMessage.propTypes = {\n  message: PropTypes.object,\n};\n\nexport default Message;\n","import React from \"react\";\n\nfunction Preloader() {\n  return (\n    <div className=\"preloader\">\n      <div>Please, select a chat to start messaging</div>\n    </div>\n  );\n}\n\nexport default Preloader;\n","import React, { useEffect } from \"react\";\nimport SendForm from \"./SendForm\";\nimport Header from \"./header/Header\";\nimport Message from \"./message/Message\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Preloader from \"./Preloader\";\nimport { useParams } from \"react-router-dom\";\nimport { loadMessages } from \"../../redux/actions/chat\";\n\nfunction Chat() {\n  const dispatch = useDispatch();\n\n  /**\n   * Массив с сообщениями и его фильтрация  по запросу поиска\n   */\n  const items = useSelector((state) => {\n    return state.chat.items.filter((item) => {\n      return (\n        item.content\n          .toUpperCase()\n          .indexOf(state.application.searchValue.toUpperCase()) !== -1\n      );\n    });\n  });\n\n  const myId = useSelector((state) => state.profile.myId);\n\n  const loading = useSelector((state) => state.chat.loading);\n\n  const opened = useParams().id;\n  /**\n   * Загрузка чата в соответствии с id кликнутого  контакта\n   */\n  useEffect(() => {\n    if (opened) {\n      dispatch(loadMessages(myId, opened));\n    }\n  }, [dispatch, opened, myId]);\n\n  if (!opened) {\n    return <Preloader />;\n  }\n\n  return (\n    <div className=\"chat-parent\">\n      <Header />\n      <div className=\"chat-block\" id=\"chat-window\">\n        {!loading &&\n          items.map((message, index) => {\n            return <Message key={index} message={message} />;\n          })}\n      </div>\n      <div className=\"parent-form\">\n        <SendForm />\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction Social({ socials }) {\n  return (\n    <div className=\"profile-social\">\n      <span className=\"header-profile\">Social</span>\n      <div className=\"social-block\">\n        {socials &&\n          Object.keys(socials).map((social, index) => {\n            return (\n              <div key={index} className=\"icons-social click\">\n                <i className={`fab fa-${social}`} /> {socials[social]}\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n}\n\nSocial.propTypes = {\n  socials: PropTypes.object,\n};\n\nexport default Social;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction Media({ fileName }) {\n  return (\n    <div className=\"profile-media\">\n      <span className=\"header-profile\">Media</span>\n      <div className=\"mediafiles\">\n        <div className=\"file click\">\n          <div className=\"media-img\"></div>\n          <div className=\"media-info\">{fileName}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nMedia.propTypes = {\n  fileName: PropTypes.string,\n};\n\nMedia.defaultProps = {\n  fileName: \"fileName\",\n};\n\nexport default Media;\n","import React from \"react\";\n\nfunction Communications() {\n  return (\n    <div className=\"communication\">\n      <div className=\"icons click\">\n        <div className=\"m-auto\">\n          <i className=\"material-icons\">call</i>\n        </div>\n      </div>\n      <div className=\"icons click\">\n        <div className=\"m-auto\">\n          <i className=\"material-icons\">videocam</i>\n        </div>\n      </div>\n      <div className=\"icons click\">\n        <div className=\"m-auto\">\n          <i className=\"material-icons\">mail</i>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Communications;\n","import React from \"react\";\nimport Avatar from \"./Avatar\";\nimport Social from \"./Social\";\nimport Media from \"./Media\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Communications from \"./Communications\";\nimport { useHotkeys } from \"react-hotkeys-hook\";\nimport { profileToggled } from \"../../redux/actions/application\";\nimport { useParams } from \"react-router-dom\";\n\nfunction ProfileContact() {\n  const dispatch = useDispatch();\n\n  const opened = useParams().id;\n\n  /**\n   * Состояние открытия окна профиля\n   */\n  const openProfile = useSelector(\n    (state) => state.application.openContactProfile\n  );\n\n  /**\n   * Данные о профиле кликнутого контакта\n   */\n  const profile = useSelector((state) =>\n    state.contacts.items.find((item) => {\n      return opened === item._id;\n    })\n  );\n\n  const loading = useSelector((state) => state.contacts.loading);\n\n  /**\n   * Вызов функции открытия окна профиля при нажатии горячих клавиш\n   */\n  useHotkeys(\n    \"shift+p\",\n    () => {\n      dispatch(profileToggled());\n    },\n    {\n      filter: () => true,\n    }\n  );\n\n  /**\n   * Вывод информации о профиле контакта если открыт чат и загрузка завершена\n   */\n  if (loading || !opened) {\n    return null;\n  }\n\n  return (\n    <div className={openProfile ? \"profile-parent-open\" : \"profile-parent\"}>\n      <div className=\"profile-info\">\n        <Avatar size={\"large\"} name={profile?.fullname} />\n        <div className=\"profile-name\">{profile?.fullname}</div>\n        <div className=\"nickname\">@{profile?.username}</div>\n        <Communications />\n      </div>\n      <Social socials={profile?.socials} />\n      <Media fileName={\"filename.pdf\"} />\n    </div>\n  );\n}\n\nexport default ProfileContact;\n","import React, { useEffect } from \"react\";\nimport Sidebar from \"./sidebar/Sidebar\";\nimport Chat from \"./chat/Chat\";\nimport ProfileContact from \"./profile/ProfileContact\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport { loadMyId } from \"../redux/actions/profile\";\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadMyId());\n  }, [dispatch]);\n\n  const loadingMyId = useSelector((state) => state.profile.loadingMyId);\n\n  return (\n    !loadingMyId && (\n      <BrowserRouter>\n        <Route path=\"/:id?\">\n          <Sidebar />\n          <Chat />\n          <ProfileContact />\n        </Route>\n      </BrowserRouter>\n    )\n  );\n}\n\nexport default App;\n","/**\n * Загрузка данных о профиле\n * @returns {Promise<{payload: *, type: string}>}\n */\nexport function loadMyId() {\n  return (dispatch) => {\n    dispatch({ type: \"myProfile/load/started\" });\n    fetch(\"https://api.intocode.ru:8001/api/profile\")\n      .then((response) => response.json())\n      .then((json) =>\n        dispatch({\n          type: \"myProfile/load/succeed\",\n          payload: json,\n        })\n      );\n  };\n}\n","const initialState = {\n  items: [],\n  loading: true,\n  requestId: 1,\n  deleting: false,\n};\n\nexport default function chat(state = initialState, action) {\n  switch (action.type) {\n    case \"chat/load/started\":\n      return {\n        ...state,\n        open: true,\n        loading: true,\n      };\n    case \"chat/load/succeed\":\n      return {\n        ...state,\n        items: action.payload,\n        loading: false,\n      };\n    case \"messages/send/started\":\n      const tempMessage = {\n        ...action.payload,\n        sending: true,\n      };\n      return {\n        ...state,\n        requestId: state.requestId + 1,\n        items: [...state.items, tempMessage],\n      };\n    case \"messages/send/succeed\":\n      return {\n        ...state,\n        items: state.items.map((item) => {\n          if (item.requestId === action.payload.requestId) {\n            return {\n              ...item,\n              sending: false,\n              _id: action.payload._id,\n            };\n          }\n          return item;\n        }),\n      };\n    case \"message/delete/started\":\n      return {\n        ...state,\n        items: state.items.filter((item) => item._id !== action.payload),\n        deleting: true,\n      };\n    case \"message/delete/succeed\":\n      return {\n        ...state,\n        items: action.payload,\n        deleting: false,\n      };\n    default:\n      return state;\n  }\n}\n","const initialState = {\n  myId: \"\",\n  loadingMyId: true,\n};\n\nexport default function profile(state = initialState, action) {\n  switch (action.type) {\n    case \"myProfile/load/started\":\n      return {\n        ...state,\n        loadingMyId: true,\n      };\n    case \"myProfile/load/succeed\":\n      return {\n        ...state,\n        myId: action.payload._id,\n        loadingMyId: false,\n      };\n    default:\n      return state;\n  }\n}\n","const initialState = {\n  items: [],\n  contactSearchValue: \"\",\n  loading: true,\n};\n\nexport default function contacts(state = initialState, action) {\n  switch (action.type) {\n    case \"contacts/load/started\":\n      return {\n        ...state,\n        loading: true,\n      };\n    case \"contacts/load/succeed\":\n      return {\n        ...state,\n        items: action.payload,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n}\n","const initialState = {\n  searchOpen: false,\n  searchValue: \"\",\n  contactSearchValue: \"\",\n  openContactProfile: false,\n};\n\nexport default function application(state = initialState, action) {\n  switch (action.type) {\n    case \"profile/open/toggle\":\n      return {\n        ...state,\n        openContactProfile: !state.openContactProfile,\n      };\n    case \"search/show/hide/toggle\":\n      return {\n        ...state,\n        searchOpen: !state.searchOpen,\n      };\n    case \"messages/searchRequest/start\":\n      return {\n        ...state,\n        searchValue: action.payload,\n      };\n    case \"contacts/searchRequest/start\":\n      return {\n        ...state,\n        contactSearchValue: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n","import { createLogger } from \"redux-logger\";\nimport { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport chat from \"./reducers/chat\";\nimport profile from \"./reducers/profile\";\nimport contacts from \"./reducers/contacts\";\nimport thunk from \"redux-thunk\";\nimport application from \"./reducers/application\";\n\n/**\n * Настройка логгера\n */\nconst logger = createLogger({\n  collapsed: true,\n  diff: true,\n});\n\n/**\n * Комбинирование редюсеров\n */\nconst reducers = combineReducers({ chat, profile, contacts, application });\n\n/**\n *  Создание настройка и стора\n */\nexport const store = createStore(reducers, applyMiddleware(thunk, logger));\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./styles.css\";\nimport \"normalize.css\";\nimport { Provider } from \"react-redux\";\nimport \"material-design-icons/iconfont/material-icons.css\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport { store } from \"./redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <div className=\"container\">\n        <App />\n      </div>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}